#+TITLE: qutebrowser Config
#+author: Rod Knowlton
#+email: rodk@codelahoma.local
* qutebrowser Config

Once [[https://orgmode.org/manual/Extracting-Source-Code.html][tangled]], this config will produce a ~config.py~ file with the following sections, and we'll include a docstring to remind us where the literate source is.

#+begin_src python :noweb yes :tangle config.py :comments both
  """
  !!! DO NOT EDIT THIS FILE DIRECTLY !!!

  This file was autogenerated from a literate programming file ~qutebrowser_config.org~, which should be located in the same directory
  """
  <<initialization>>
  <<ui-customization>>
  <<keybindings>>
  <<preferences>>
#+end_src

* UI Customization
:PROPERTIES:
:header-args: :noweb-ref ui-customization :tangle no
:END:

** Zoom for my weary eyes
Bump up the interface fonts
#+begin_src python 
  c.fonts.default_size = "18pt"
#+end_src

Zoom the page overall
#+begin_src python 
  c.zoom.default = "125%"
#+end_src
* Keybindings
:PROPERTIES:
:header-args: :noweb-ref keybindings :tangle no
:END:

** mpv
#+begin_src python
# config.bind(',b', 'spawn --userscript qute-capture write')
config.bind(';w', 'hint links spawn  ~/.local/bin/mpv  {hint-url}')
#+end_src
** Navigation
Attempting to recreate my [[file:~/.homesick/repos/dotfiles/home/.config/vimium/vimium-options.json][Vimium]] keybinding experience, as much as possible.

The =,= prefix is reserved for user binding, but I'll instead use it as a holding area for bindings that would be shadowed by my desired ones.

As an example, I'm accustomed to using =x= to close a tab, but by default it's just the first character of the =xo= and =xO= bindings, so I'll recreate those bindings as =,xo= and =,xO=.

*** History
#+begin_src python
  config.bind("h", "back")
  config.bind("l", "forward")
#+end_src

*** Tab Management
Reverse the existing bindings for moving tab to tab
#+begin_src python
  config.unbind("J")
  config.unbind("K")

  config.bind("J", "tab-prev")
  config.bind("K", "tab-next")
#+end_src

Given the huge number of default bindings that have a =t= prefix, I'll go ahead and use =,t= as my /new tab/ key, but may end up just using the default =O= binding instead
#+begin_src python
  config.bind(",t", "set-cmd-text -s :open -t ")
#+end_src

The =x= binding I mentioned above isn't nearly as overloaded, and I'm /really/ used to using it to close tabs, so I'll do the little bit of work to move them.
#+begin_src python
  config.unbind("xo")
  config.unbind("xO")

  config.bind(",xo", "set-cmd-txt -s :open -b ")
  config.bind(",xO", "set-cmd-txt -s :open -b -r {url:pretty}")

  config.bind("x", "tab-close")
  config.bind("X", "undo")
#+end_src

=b= defaults to loading quickmarks, but I prefering for hopping around tabs (buffers would be the mnemonic)
#+begin_src python
#+end_src

* Preferences
:PROPERTIES:
:header-args: :noweb-ref preferences :tangle no
:END:

** Sessions
Multiple sessions are apparently supported, but for now I just care about always opening with the tabs I last had open.
#+begin_src python
  c.auto_save.session = True
#+end_src

* Initialization
#+NAME: initialization
#+begin_src python :noweb yes :tangle no
  <<imports>>

  <<set-up-config>>

#+end_src

* Imports

#+NAME: imports
#+begin_src python :tangle no
import operator
import os
import platform

from qutebrowser.api import interceptor, message
from qutebrowser.config.config import ConfigContainer  # noqa: F401
from qutebrowser.config.configfiles import ConfigAPI  # noqa: F401
#+end_src

* Set Up Configuration
By using =noweb= syntax, we can keep our configuration object initialization up top here, including the initial configuration pulled over when converting from the =autoconfig.yml= file to =config.py=, while tucking all of the settings configuration pulled over from that base configuration at the [[id:27482A0D-35F7-4368-BB02-DAB42D001BD4][end of this file]]

#+NAME: set-up-config
#+begin_src python :noweb yes :tangle no
config = config  # type: ConfigAPI  # noqa: F821
c = c  # type: ConfigContainer  # noqa: F821

<<config-from-initial-conversion>>

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(False)

#+end_src

#+RESULTS: set-up-config

* Config from the initial conversion from base yaml
:PROPERTIES:
:ID:       27482A0D-35F7-4368-BB02-DAB42D001BD4
:END:
From the autogeneration:

 Autogenerated config.py

 NOTE: config.py is intended for advanced users who are comfortable with manually migrating the config file on qutebrowser upgrades. If you prefer, you can also configure qutebrowser using the :set/:bind/:config-* commands without having to write a config.py file.

 Documentation:
   qute://help/configuring.html
   qute://help/settings.html

#+NAME: config-from-initial-conversion
#+begin_src python :noweb yes :tangle no
  <<cookies-config>>
  <<headers-config>>
  <<images-config>>
  <<javascript-config>>
#+end_src
** Cookies
:PROPERTIES:
:header-args:python: :noweb-ref cookies-config :tangle no
:END:

Which cookies to accept. With QtWebEngine, this setting also controls other features with tracking capabilities similar to those of cookies; including IndexedDB, DOM storage, filesystem API, service workers, and AppCache. Note that with QtWebKit, only `all` and `never` are supported as per-domain values. Setting `no-3rdparty` or `no- unknown-3rdparty` per-domain on QtWebKit will have the same effect as `all`. If this setting is used with URL patterns, the pattern gets applied to the origin/first party URL of the page making the request, not the request URL. With QtWebEngine 5.15.0+, paths will be stripped from URLs, so URL patterns using paths will not match. With QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so you will typically need to set this setting for `example.com` when the cookie is set on `somesubdomain.example.com` for it to work properly.

To debug issues with this setting, start qutebrowser with `--debug --logfilter network --debug-flag log-cookies` which will show all cookies being set.

     Type: String

     Valid values:
       - all: Accept all cookies.
       - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
       - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
       - never: Don't accept cookies at all.
#+begin_src python :tangle no
  config.set('content.cookies.accept', 'all', 'chrome-devtools://*')
  config.set('content.cookies.accept', 'all', 'devtools://*')
#+end_src

** Headers 
:PROPERTIES:
:header-args: :noweb-ref headers-config
:END:

  Value to send in the `Accept-Language` header. Note that the value
  read from JavaScript is always the global value.

  Type: String
#+begin_src python :tangle no
    config.set('content.headers.accept_language', '', 'https://matchmaker.krunker.io/*')
#+end_src

 User agent to send.  The following placeholders are defined:
- os_info :: Something like "X11; Linux x86_64".
- webkit_version :: The underlying WebKit version (set to a fixed value   with
 QtWebEngine).
- qt_key :: "Qt" for QtWebKit, "QtWebEngine" for
 QtWebEngine.
- qt_version :: The underlying Qt version.
- upstream_browser_key :: "Version" for QtWebKit, "Chrome" for QtWebEngine.
- upstream_browser_version :: The corresponding Safari/Chrome version.
- qutebrowser_version :: The currently running qutebrowser version.  The default value is equal to the unchanged user agent of QtWebKit/QtWebEngine.  Note that the value read from JavaScript is always the global value. With QtWebEngine between 5.12 and 5.14 (inclusive), changing the value exposed to JavaScript requires a restart.

 Type: FormatString
#+begin_src python :tangle no
  config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

  config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:90.0) Gecko/20100101 Firefox/90.0', 'https://accounts.google.com/*')

  config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')

#+end_src

** Images
:PROPERTIES:
:header-args: :noweb-ref images-config
:END:
Load images automatically in web pages.

Type: Bool
#+begin_src python :tangle no
  config.set('content.images', True, 'chrome-devtools://*')
  config.set('content.images', True, 'devtools://*')
#+end_src

** JavaScript
:PROPERTIES:
:header-args: :noweb-ref javascript-config
:END:
Enable JavaScript.

Type: Bool
#+begin_src python :tangle no
  config.set('content.javascript.enabled', True, 'chrome-devtools://*')
  config.set('content.javascript.enabled', True, 'devtools://*')
  config.set('content.javascript.enabled', True, 'chrome://*/*')
  config.set('content.javascript.enabled', True, 'qute://*/*')

#+end_src
