#+TITLE: CodeLahoma Org Mode Extensions
#+AUTHOR: Rod Knowlton
#+EMAIL: codelahoma@gmail.com
#+DATE: [2025-01-08 Wed]
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle ~/.spacemacs.d/codelahoma-org.el :comments both

* Introduction

This file contains custom org-mode extensions and utilities for the CodeLahoma GTD system.
The code is tangled to =codelahoma-org.el= and automatically loaded by the main Spacemacs configuration.

* GTD System Core Functions

** Directory and File Management
#+begin_src emacs-lisp
(defvar rk/org-directory "~/personal/org-files/"
  "Base directory for all org files")

(defun rk/org-file (filename)
  "Return full path to org file in the org directory."
  (expand-file-name filename rk/org-directory))
#+end_src

** GTD Capture Functions
#+begin_src emacs-lisp
(defun rk/org-inbox-capture ()
  "Quickly capture to inbox."
  (interactive)
  (org-capture nil "i"))

(defun rk/org-work-capture ()
  "Quickly capture work task."
  (interactive)
  (org-capture nil "wt"))

(defun rk/org-personal-capture ()
  "Quickly capture personal task."
  (interactive)
  (org-capture nil "pt"))
#+end_src

** GTD Navigation Functions
#+begin_src emacs-lisp
(defun rk/org-goto-inbox ()
  "Go to inbox file."
  (interactive)
  (find-file (rk/org-file "inbox.org")))

(defun rk/org-goto-work ()
  "Go to work file."
  (interactive)
  (find-file (rk/org-file "work.org")))

(defun rk/org-goto-personal ()
  "Go to personal file."
  (interactive)
  (find-file (rk/org-file "personal.org")))

(defun rk/org-goto-projects ()
  "Go to projects file."
  (interactive)
  (find-file (rk/org-file "projects.org")))
#+end_src

** GTD Review and Agenda Functions
#+begin_src emacs-lisp
(defun rk/org-review-inbox ()
  "Review and process inbox items."
  (interactive)
  (find-file (rk/org-file "inbox.org"))
  (org-agenda nil "i"))

(defun rk/org-weekly-review ()
  "Start weekly review process."
  (interactive)
  (org-agenda nil "r"))

(defun rk/org-daily-agenda ()
  "Show unified daily agenda."
  (interactive)
  (org-agenda nil "u"))
#+end_src

* Appearance and Styling Functions

** Org Heading Color Schemes
#+begin_src emacs-lisp
(defvar org-heading-colors-schemes
  '(("Arctic"    . ("LightCyan" "AliceBlue" "LavenderBlue" "GhostWhite" "LightSteelBlue"))
    ("Autumn"    . ("OrangeRed" "DarkGoldenrod" "Sienna" "Peru" "Wheat4"))
    ("Candy"     . ("HotPink" "DeepPink" "VioletRed" "MediumVioletRed" "RosyBrown"))
    ("Cyber"     . ("DeepPink" "Cyan" "SpringGreen" "BlueViolet" "DimGray"))
    ("Desert"    . ("Tan4" "SandyBrown" "PeachPuff3" "Wheat4" "Bisque4"))
    ("Earth"     . ("Sienna" "RosyBrown" "DarkKhaki" "Tan" "Wheat4"))
    ("Forest"    . ("ForestGreen" "OliveDrab" "DarkOliveGreen" "YellowGreen" "DarkSeaGreen"))
    ("Galaxy"    . ("MediumSlateBlue" "MediumPurple" "Purple" "DarkViolet" "SlateGray"))
    ("Garden"    . ("MediumSeaGreen" "DarkSeaGreen" "PaleGreen" "LightGreen" "Gray"))
    ("Meadow"    . ("MediumAquamarine" "PaleGreen" "LightGreen" "DarkSeaGreen" "LightSlateGray"))
    ("Mountain"  . ("RoyalBlue4" "SteelBlue4" "DodgerBlue4" "SlateBlue4" "LightSlateGray"))
    ("Nordic"    . ("SteelBlue" "LightSteelBlue" "SlateGray" "LightSlateGray" "Gray"))
    ("Ocean"     . ("DeepSkyBlue1" "MediumSpringGreen" "Turquoise" "SlateBlue" "CadetBlue"))
    ("Pastel"    . ("SkyBlue" "LightGoldenrod" "PaleGreen" "Salmon" "LightGray"))
    ("Retro"     . ("Magenta3" "Cyan3" "Yellow3" "Green3" "Gray3"))
    ("Royal"     . ("RoyalBlue" "MediumBlue" "Navy" "MidnightBlue" "SlateGray"))
    ("Seaside"   . ("CadetBlue" "LightBlue" "PowderBlue" "PaleTurquoise" "LightSlateGray"))
    ("Sunset"    . ("MediumVioletRed" "DeepPink" "HotPink" "LightPink" "RosyBrown"))
    ("Twilight"  . ("MediumPurple" "SlateBlue" "DarkSlateBlue" "Navy" "DimGray"))
    ("Vibrant"   . ("DodgerBlue1" "Gold1" "Chartreuse1" "OrangeRed1" "Gray50"))
    ("Volcanic"  . ("OrangeRed" "Firebrick" "DarkRed" "IndianRed" "RosyBrown4"))
    ("Wine"      . ("Maroon" "VioletRed" "MediumVioletRed" "PaleVioletRed" "RosyBrown")))
  "Alist of org heading color schemes. Each scheme contains 5 colors:
4 for different heading levels and 1 for done states.")

(defun preview-org-colors ()
  "Preview all color schemes in a temporary buffer."
  (interactive)
  (let ((preview-buffer (get-buffer-create "*Org Color Schemes Preview*")))
    (with-current-buffer preview-buffer
      (erase-buffer)
      (fundamental-mode)
      (dolist (scheme org-heading-colors-schemes)
        (let* ((scheme-name (car scheme))
               (colors (cdr scheme)))

          ;; Insert the theme name
          (let ((start-pos (point)))
            (insert (format "* %s Theme\n" scheme-name))
            (add-text-properties start-pos (point)
                               `(face (:weight bold :height 1.5))))

          ;; Insert each level with its color
          (dotimes (i 4)
            (let ((start-pos (point)))
              (insert (format "%s Level %d Heading (%s)\n"
                            (make-string (1+ i) ?*)
                            (1+ i)
                            (nth i colors)))
              (add-text-properties
               start-pos (point)
               `(face (:foreground ,(nth i colors) :height ,(- 1.4 (* i 0.1)))))))

          ;; Add done state preview
          (let ((start-pos (point)))
            (insert (format "* DONE Example Done Heading (%s)\n" (nth 4 colors)))
            (add-text-properties
             start-pos (point)
             `(face (:foreground ,(nth 4 colors) :height 1.3))))

          (insert "\n"))))

    (display-buffer preview-buffer)))

(defun switch-org-colors (scheme-name)
  "Switch org heading colors to a predefined scheme.
SCHEME-NAME should be one of the defined color schemes."
  (interactive
   (list (completing-read "Choose color scheme: "
                         (mapcar #'car org-heading-colors-schemes))))
  (let* ((colors (cdr (assoc scheme-name org-heading-colors-schemes)))
         (variable-tuple
          (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                ((x-list-fonts "Avenir Next") '(:font "Avenir Next"))
                ((x-list-fonts "Verdana") '(:font "Verdana"))
                ((x-list-fonts "ETBembo") '(:font "ETBembo"))
                ((x-list-fonts "Lucida Grande") '(:font "Lucida Grande"))
                ((x-family-fonts "Sans Serif") '(:family "Sans Serif"))
                (nil (warn "Cannot find a Sans Serif Font. Install Source Sans Pro."))))
         (headline `(:inherit default :weight normal)))

    (custom-theme-set-faces
     'user
     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.8 :foreground ,(nth 0 colors)))))
     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5 :foreground ,(nth 1 colors)))))
     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.4 :foreground ,(nth 2 colors)))))
     `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.3 :foreground ,(nth 3 colors)))))
     `(org-done ((t (,@headline :foreground ,(nth 4 colors))))))

    (message "Switched to %s color scheme" scheme-name)))
#+end_src

** Org Bullet Schemes
#+begin_src emacs-lisp
(defvar rk/org-bullet-schemes
  '(("Geometric" . ("◉" "○" "◈" "◇"))
    ("Natural"   . ("❋" "✿" "❀" "✤"))
    ("Stars"     . ("★" "☆" "✭" "✧"))
    ("Circles"   . ("●" "◐" "◑" "○"))
    ("Math"      . ("➊" "➋" "➌" "➍"))
    ("Arrows"    . ("➤" "➢" "➣" "➼"))
    ("Modern"    . ("◆" "▶" "▸" "▹"))
    ("Celestial" . ("✶" "✸" "✹" "✺"))
    ("Boxes"      . ("█" "▅" "▃" "▁"))
    ("Diamonds"   . ("❖" "❈" "✧" "✦"))
    ("Flowers"    . ("✾" "✽" "✼" "✻"))
    ("Hearts"     . ("❤" "♥" "♡" "❥"))
    ("Snowflakes" . ("❄" "❆" "❅" "❊"))
    ("Chess"      . ("♔" "♕" "♖" "♗"))
    ("Squares"    . ("⬣" "⬡" "⬢" "⬩"))
    ("Weather"    . ("☀" "☁" "☂" "☃"))
    ("Music"      . ("♬" "♫" "♪" "♩"))
    ("Cards"      . ("♠" "♣" "♥" "♦"))
    ("Buddhist"   . ("☸" "☯" "☮" "✴"))
    ("Runes"      . ("ᛃ" "ᛒ" "ᛦ" "ᚻ"))
    ("Tech"       . ("⌘" "⌥" "⇧" "⌤"))
    ("Blocks"     . ("░" "▒" "▓" "█"))
    ("Planets"    . ("☉" "☽" "☿" "♀"))
    ("Zodiac"     . ("♈" "♉" "♊" "♋"))
    ("Ancient"    . ("⚛" "☤" "⚕" "⚚"))
    ("Symbolic"   . ("⚡" "☘" "☔" "☠"))
    ("Checklist"  . ("☑" "☐" "⚀" "⚁")) )
  "Alist of org heading bullet schemes.")

(defun rk/switch-org-bullets (scheme-name)
  "Switch org heading bullets to a predefined scheme."
  (interactive
   (list (completing-read "Choose bullet scheme: "
                          (mapcar #'car rk/org-bullet-schemes))))
  (let ((bullets (cdr (assoc scheme-name rk/org-bullet-schemes))))
    (setq org-superstar-headline-bullets-list bullets)
    (org-superstar-restart)
    (message "Switched to %s bullet scheme" scheme-name)))

(defun rk/preview-org-bullets ()
  "Preview all bullet schemes in a temporary buffer."
  (interactive)
  (with-output-to-temp-buffer "*Org Bullet Schemes Preview*"
    (with-current-buffer "*Org Bullet Schemes Preview*"
      (org-mode)
      (dolist (scheme rk/org-bullet-schemes)
        (insert (format "* %s\n" (car scheme)))
        (let ((bullets (cdr scheme)))
          (dolist (bullet bullets)
            (insert (format "  %s %s\n" bullet bullet))))
        (insert "\n")))))
#+end_src

* Integration Functions

** Elfeed Integration
#+begin_src emacs-lisp
(defun elfeed-save-to-org-roam-dailies ()
  "Save the current elfeed entry to org-roam dailies."
  (interactive)
  (let* ((entry (elfeed-search-selected :single))
         (title (elfeed-entry-title entry))
         (link (elfeed-entry-link entry))
         (content (elfeed-deref (elfeed-entry-content entry)))
         (date (format-time-string "%Y-%m-%d"))
         (org-roam-dailies-dir (expand-file-name "dailies" org-roam-directory))
         (daily-file (expand-file-name (concat date ".org") org-roam-dailies-dir)))
    (unless (file-exists-p daily-file)
      (with-temp-buffer (write-file daily-file)))
    (with-current-buffer (find-file-noselect daily-file)
      (goto-char (point-max))
      (insert (concat "* " title "\n"))
      (insert (concat "[[" link "][" link "]]\n\n"))
      (insert (concat content "\n"))
      (save-buffer))))
#+end_src

* Development and Utility Functions

** Custom Spacemacs Config Helper
#+begin_src emacs-lisp
(defun rk/insert-spacemacs-config-block ()
  "Insert org-babel source block for Spacemacs config."
  (interactive)
  (let* ((targets (rk/get-spacemacs-config-targets))
         (target (completing-read "Choose target or specify new: " targets nil t)))
    (setq rk/last-inserted-config-target target)
    (insert (format "#+begin_src emacs-lisp :noweb-ref %s\n\n" target)
            (format "  ;; insert your code here\n\n")
            "#+end_src\n")))

(defun rk/get-spacemacs-config-targets ()
  "Get list of unique Spacemacs config targets from noweb references in source blocks with matching header."
  (interactive)
  (let ((targets '()))
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "^#\\+begin_src emacs-lisp :noweb-ref \\([^,[:space:]]+\\)[,[:space:]]" nil t)
        (let ((target (match-string 1)))
          (unless (member target targets)
            (push target targets)))))
    targets))
#+end_src

** Project and Org Management Utilities
#+begin_src emacs-lisp
(defun rk/org-create-project-template ()
  "Create a new project with standard structure."
  (interactive)
  (let* ((project-name (read-string "Project name: "))
         (project-file (rk/org-file "projects.org")))
    (with-current-buffer (find-file-noselect project-file)
      (goto-char (point-max))
      (insert (format "\n* PROJECT %s\n" project-name))
      (insert "** Purpose/Outcome\n   \n\n")
      (insert "** Next Actions\n*** TODO \n\n")
      (insert "** Notes\n   \n\n")
      (insert "** Reference Materials\n   \n\n")
      (save-buffer)
      (message "Created project template for %s" project-name))))

(defun rk/org-archive-done-items ()
  "Archive all DONE items in current buffer."
  (interactive)
  (org-map-entries
   (lambda ()
     (when (member (org-get-todo-state) '("DONE" "CANCELLED" "COMPLETED" "ATTENDED" "ANSWERED" "DECIDED"))
       (org-archive-subtree)))
   nil 'file))

(defun rk/org-weekly-report ()
  "Generate a weekly report of completed items."
  (interactive)
  (let* ((week-start (format-time-string "%Y-%m-%d" (time-subtract (current-time) (* 7 24 60 60))))
         (report-buffer (get-buffer-create "*Weekly Report*")))
    (with-current-buffer report-buffer
      (erase-buffer)
      (insert (format "# Weekly Report - Week of %s\n\n" week-start))
      (insert "## Completed Items\n\n")
      ;; This would need more complex logic to parse LOGBOOK entries
      ;; For now, just show the buffer
      (org-mode))
    (display-buffer report-buffer)))
#+end_src

** Advanced Capture Functions
#+begin_src emacs-lisp
(defun rk/org-capture-meeting-notes ()
  "Capture meeting notes with attendees and agenda."
  (interactive)
  (let* ((meeting-topic (read-string "Meeting topic: "))
         (attendees (read-string "Attendees: "))
         (agenda (read-string "Agenda: ")))
    (org-capture-string
     (format "* MEETING %s\n  SCHEDULED: %s\n  Attendees: %s\n  \n** Agenda\n  %s\n  \n** Notes\n  \n** Action Items\n  "
             meeting-topic
             (format-time-string "<%Y-%m-%d %a %H:%M>")
             attendees
             agenda)
     "wm")))

(defun rk/org-capture-decision ()
  "Capture a decision with context and options."
  (interactive)
  (let* ((decision-topic (read-string "Decision topic: "))
         (context (read-string "Context: ")))
    (org-capture-string
     (format "* QUESTION Should we %s?\n\n** Context\n   %s\n\n** Options\n*** Option 1: \n    Pros: \n    Cons: \n\n*** Option 2: \n    Pros: \n    Cons: \n\n** Decision\n   \n\n** Next Actions\n   [ ] "
             decision-topic
             context)
     "i")))
#+end_src

** Claude AI Integration Functions
#+begin_src emacs-lisp
(defun rk/ask-claude-about-gtd-manual ()
  "Ask Claude about the GTD users guide using the CLI with continuing conversation."
  (interactive)
  (let* ((users-guide (rk/org-file "gtd-users-guide.org"))
         (question (read-string "Ask Claude about GTD manual: "))
         (claude-command (format "claude --continue 'I have a question about my GTD users guide. Here is my question: %s. Please refer to the attached GTD users guide file.' '%s'" 
                                question 
                                users-guide)))
    (if (file-exists-p users-guide)
        (progn
          (message "Asking Claude about GTD manual...")
          (let ((output-buffer (get-buffer-create "*Claude GTD Response*")))
            (with-current-buffer output-buffer
              (erase-buffer)
              (insert (format "Question: %s\n\n" question))
              (insert "Claude's Response:\n")
              (insert "=" (make-string 50 ?=) "\n\n")
              (call-process-shell-command claude-command nil t)
              (org-mode)
              (goto-char (point-min)))
            (display-buffer output-buffer)))
      (message "GTD users guide not found at %s" users-guide))))

(defun rk/ask-claude-about-gtd-tutorial ()
  "Ask Claude about the GTD tutorial using the CLI with continuing conversation."
  (interactive)
  (let* ((tutorial (rk/org-file "gtd-tutorial.org"))
         (question (read-string "Ask Claude about GTD tutorial: "))
         (claude-command (format "claude --continue 'I have a question about my GTD tutorial. Here is my question: %s. Please refer to the attached GTD tutorial file.' '%s'" 
                                question 
                                tutorial)))
    (if (file-exists-p tutorial)
        (progn
          (message "Asking Claude about GTD tutorial...")
          (let ((output-buffer (get-buffer-create "*Claude GTD Response*")))
            (with-current-buffer output-buffer
              (erase-buffer)
              (insert (format "Question: %s\n\n" question))
              (insert "Claude's Response:\n")
              (insert "=" (make-string 50 ?=) "\n\n")
              (call-process-shell-command claude-command nil t)
              (org-mode)
              (goto-char (point-min)))
            (display-buffer output-buffer)))
      (message "GTD tutorial not found at %s" tutorial))))

(defun rk/start-claude-gtd-conversation ()
  "Start a new Claude conversation specifically about GTD system."
  (interactive)
  (let* ((users-guide (rk/org-file "gtd-users-guide.org"))
         (tutorial (rk/org-file "gtd-tutorial.org"))
         (initial-prompt "I want to start a conversation about my GTD (Getting Things Done) system. I have two reference files: a tutorial for learning the system and a comprehensive users guide. Please review these files and let me know you're ready to answer questions about my GTD workflow, configuration, troubleshooting, or any other GTD-related topics.")
         (claude-command (format "claude '%s' '%s' '%s'" 
                                initial-prompt
                                users-guide 
                                tutorial)))
    (if (and (file-exists-p users-guide) (file-exists-p tutorial))
        (progn
          (message "Starting Claude GTD conversation...")
          (let ((output-buffer (get-buffer-create "*Claude GTD Conversation*")))
            (with-current-buffer output-buffer
              (erase-buffer)
              (insert "Starting GTD Conversation with Claude\n")
              (insert "=" (make-string 40 ?=) "\n\n")
              (call-process-shell-command claude-command nil t)
              (org-mode)
              (goto-char (point-min)))
            (display-buffer output-buffer)))
      (message "GTD files not found. Need both tutorial and users guide."))))

(defun rk/continue-claude-gtd-conversation ()
  "Continue the existing Claude GTD conversation."
  (interactive)
  (let* ((question (read-string "Continue GTD conversation with Claude: "))
         (claude-command (format "claude --continue '%s'" question)))
    (message "Continuing Claude GTD conversation...")
    (let ((output-buffer (get-buffer-create "*Claude GTD Conversation*")))
      (with-current-buffer output-buffer
        (goto-char (point-max))
        (insert "\n\n" (make-string 40 ?-) "\n")
        (insert (format "You: %s\n\n" question))
        (insert "Claude: ")
        (call-process-shell-command claude-command nil t)
        (org-mode)
        (goto-char (point-max)))
      (display-buffer output-buffer))))

(defun rk/ask-claude-quick-gtd ()
  "Quick one-shot question about GTD without starting a conversation."
  (interactive)
  (let* ((question (read-string "Quick GTD question for Claude: "))
         (users-guide (rk/org-file "gtd-users-guide.org"))
         (claude-command (format "claude -p 'Quick GTD question: %s. Please answer based on the attached comprehensive GTD users guide.' '%s'" 
                                question 
                                users-guide)))
    (if (file-exists-p users-guide)
        (progn
          (message "Getting quick GTD answer from Claude...")
          (let ((output-buffer (get-buffer-create "*Claude Quick GTD*")))
            (with-current-buffer output-buffer
              (erase-buffer)
              (insert (format "Q: %s\n\n" question))
              (call-process-shell-command claude-command nil t)
              (org-mode)
              (goto-char (point-min)))
            (display-buffer output-buffer)))
      (message "GTD users guide not found at %s" users-guide))))
#+end_src

* Configuration and Setup Functions

** System Configuration Loader
#+begin_src emacs-lisp
(defun rk/load-codelahoma-org-config ()
  "Load the codelahoma-org configuration if the file exists."
  (let ((config-file (expand-file-name "~/.spacemacs.d/codelahoma-org.el")))
    (when (file-exists-p config-file)
      (load-file config-file)
      (message "Loaded CodeLahoma org extensions"))))

(defun rk/tangle-and-load-codelahoma-org ()
  "Tangle this file and load the resulting elisp."
  (interactive)
  (let ((org-file (expand-file-name "~/.codelahoma-org.org"))
        (el-file (expand-file-name "~/.spacemacs.d/codelahoma-org.el")))
    (when (file-exists-p org-file)
      ;; Tangle the org file
      (with-current-buffer (find-file-noselect org-file)
        (org-babel-tangle))
      ;; Load the tangled elisp
      (when (file-exists-p el-file)
        (load-file el-file)
        (message "Tangled and loaded CodeLahoma org extensions")))))
#+end_src

* Keybinding Setup

** Custom Keybindings for Extensions
#+begin_src emacs-lisp
(defun rk/setup-codelahoma-org-keybindings ()
  "Set up keybindings for CodeLahoma org extensions."
  ;; Declare extensions prefix
  (spacemacs/declare-prefix "oox" "extensions")
  
  ;; Color and bullet schemes
  (spacemacs/set-leader-keys "ooxc" 'switch-org-colors)
  (spacemacs/set-leader-keys "ooxC" 'preview-org-colors)
  (spacemacs/set-leader-keys "ooxb" 'rk/switch-org-bullets)
  (spacemacs/set-leader-keys "ooxB" 'rk/preview-org-bullets)
  
  ;; Project management
  (spacemacs/set-leader-keys "ooxp" 'rk/org-create-project-template)
  (spacemacs/set-leader-keys "ooxa" 'rk/org-archive-done-items)
  (spacemacs/set-leader-keys "ooxr" 'rk/org-weekly-report)
  
  ;; Advanced capture
  (spacemacs/set-leader-keys "ooxm" 'rk/org-capture-meeting-notes)
  (spacemacs/set-leader-keys "ooxd" 'rk/org-capture-decision)
  
  ;; Claude AI integration
  (spacemacs/declare-prefix "ooxA" "claude")
  (spacemacs/set-leader-keys "ooxAm" 'rk/ask-claude-about-gtd-manual)
  (spacemacs/set-leader-keys "ooxAt" 'rk/ask-claude-about-gtd-tutorial)
  (spacemacs/set-leader-keys "ooxAs" 'rk/start-claude-gtd-conversation)
  (spacemacs/set-leader-keys "ooxAc" 'rk/continue-claude-gtd-conversation)
  (spacemacs/set-leader-keys "ooxAq" 'rk/ask-claude-quick-gtd)
  
  ;; System maintenance
  (spacemacs/set-leader-keys "ooxt" 'rk/tangle-and-load-codelahoma-org))
#+end_src

* Auto-loading Hook

** Initialize Extensions
#+begin_src emacs-lisp
;; Auto-setup when org-mode loads
(with-eval-after-load 'org
  (rk/setup-codelahoma-org-keybindings)
  (message "CodeLahoma org extensions loaded"))

;; Provide feature
(provide 'codelahoma-org)
#+end_src

---
/CodeLahoma Org Mode Extensions - Modular org-mode enhancements/