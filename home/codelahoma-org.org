#+TITLE: CodeLahoma Org Mode Extensions
#+AUTHOR: Rod Knowlton
#+EMAIL: codelahoma@gmail.com
#+DATE: [2025-01-08 Wed]
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle ~/.spacemacs.d/codelahoma-org.el :comments both

* Introduction

This file contains custom org-mode extensions and utilities for the CodeLahoma GTD system.
The code is tangled to =codelahoma-org.el= and automatically loaded by the main Spacemacs configuration.

* GTD System Core Functions

** Directory and File Management
#+begin_src emacs-lisp
;; Legacy org directory for backward compatibility
(defvar rk/org-directory "~/personal/org-files/"
  "Base directory for all org files")

(defun rk/org-file (filename)
  "Return full path to org file in the org directory."
  (expand-file-name filename rk/org-directory))

;; ======================================
;; GTD Directory Structure Configuration
;; ======================================

(defvar rk/org-gtd-base-dir (expand-file-name "~/personal/org-files/")
  "Base directory for GTD org files.")

(defvar rk/org-gtd-work-dir (expand-file-name "work/" rk/org-gtd-base-dir)
  "Directory for work-related GTD files.")

(defvar rk/org-gtd-personal-dir (expand-file-name "personal/" rk/org-gtd-base-dir)
  "Directory for personal GTD files.")

(defun rk/org-file (filename &optional subdir)
  "Generate full path for org file FILENAME in optional SUBDIR.
SUBDIR can be 'work', 'personal', or nil for base directory."
  (let ((base-dir (cond
                   ((string= subdir "work") rk/org-gtd-work-dir)
                   ((string= subdir "personal") rk/org-gtd-personal-dir)
                   (t rk/org-gtd-base-dir))))
    (expand-file-name filename base-dir)))

(defun rk/create-gtd-structure ()
  "Create the complete GTD directory and file structure."
  (interactive)
  (let ((dirs (list rk/org-gtd-base-dir 
                    rk/org-gtd-work-dir 
                    rk/org-gtd-personal-dir))
        (files (list
                ;; Base files
                (rk/org-file "inbox.org")
                (rk/org-file "archive.org")
                ;; Work files
                (rk/org-file "gtd.org" "work")
                (rk/org-file "projects.org" "work")
                (rk/org-file "someday.org" "work")
                ;; Personal files  
                (rk/org-file "gtd.org" "personal")
                (rk/org-file "projects.org" "personal")
                (rk/org-file "someday.org" "personal"))))
    
    ;; Create directories
    (dolist (dir dirs)
      (unless (file-exists-p dir)
        (make-directory dir t)
        (message "Created directory: %s" dir)))
    
    ;; Create files with basic headers
    (dolist (file files)
      (unless (file-exists-p file)
        (with-temp-file file
          (insert (format "#+TITLE: %s\n" 
                         (file-name-sans-extension (file-name-nondirectory file))))
          (insert "#+STARTUP: overview\n\n"))
        (message "Created file: %s" file)))
    
    (message "GTD structure creation complete!")))

(defun rk/validate-gtd-structure ()
  "Validate that GTD directory structure exists and is complete."
  (interactive)
  (let ((missing-dirs '())
        (missing-files '()))
    
    ;; Check directories
    (dolist (dir (list rk/org-gtd-base-dir rk/org-gtd-work-dir rk/org-gtd-personal-dir))
      (unless (file-exists-p dir)
        (push dir missing-dirs)))
    
    ;; Check files
    (dolist (file (list
                   (rk/org-file "inbox.org")
                   (rk/org-file "archive.org")
                   (rk/org-file "gtd.org" "work")
                   (rk/org-file "projects.org" "work")
                   (rk/org-file "someday.org" "work")
                   (rk/org-file "gtd.org" "personal")
                   (rk/org-file "projects.org" "personal")
                   (rk/org-file "someday.org" "personal")))
      (unless (file-exists-p file)
        (push file missing-files)))
    
    (if (and (null missing-dirs) (null missing-files))
        (message "✅ GTD structure is complete and valid!")
      (progn
        (when missing-dirs
          (message "❌ Missing directories: %s" (string-join missing-dirs ", ")))
        (when missing-files
          (message "❌ Missing files: %s" (string-join missing-files ", ")))))))
#+end_src

** GTD TODO Keywords and State Management
#+begin_src emacs-lisp
;; ======================================
;; GTD TODO Keywords and State Management
;; ======================================

;; GTD-specific TODO keywords with fast selection
(setq org-todo-keywords
      '((sequence "NEXT(n)" "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")
        (sequence "PROJECT(p)" "|" "COMPLETED(C)")
        (sequence "SOMEDAY(s)" "|" "DECIDED(D)")))

;; State change logging with timestamps
(setq org-log-done 'time
      org-log-into-drawer t
      org-log-state-notes-insert-after-drawers nil)

;; Log state changes with notes
(setq org-todo-keyword-faces
      '(("NEXT" . (:foreground "orange" :weight bold))
        ("TODO" . (:foreground "red" :weight bold))
        ("WAITING" . (:foreground "yellow" :weight bold))
        ("PROJECT" . (:foreground "blue" :weight bold))
        ("SOMEDAY" . (:foreground "purple" :weight bold))
        ("DONE" . (:foreground "green" :weight bold))
        ("CANCELLED" . (:foreground "gray" :weight bold))
        ("COMPLETED" . (:foreground "green" :weight bold))
        ("DECIDED" . (:foreground "gray" :weight bold))))

;; ======================================
;; GTD Context Tags Configuration  
;; ======================================

;; Comprehensive GTD context tags with fast selection
(setq org-tag-alist
      '((:startgrouptag)
        ("CONTEXT" . ?C)
        (:grouptags)
        ("@work" . ?w)
        ("@home" . ?h) 
        ("@office" . ?o)
        ("@computer" . ?c)
        ("@phone" . ?p)
        ("@errands" . ?e)
        ("@agenda" . ?a)
        (:endgrouptag)
        
        (:startgrouptag)
        ("ENERGY" . ?E)
        (:grouptags)
        ("@high_energy" . ?H)
        ("@low_energy" . ?L)
        ("@creative" . ?r)
        ("@administrative" . ?A)
        (:endgrouptag)
        
        (:startgrouptag)
        ("TIME" . ?T)
        (:grouptags)
        ("@5min" . ?5)
        ("@15min" . ?1)
        ("@30min" . ?3)
        ("@1hr" . ?6)
        ("@2hr" . ?2)
        (:endgrouptag)
        
        (:startgrouptag)
        ("TYPE" . ?Y)
        (:grouptags)
        ("@personal" . ?P)
        ("@project" . ?j)
        ("@learning" . ?l)
        ("@health" . ?4)
        ("@finance" . ?f)
        (:endgrouptag)))

;; Tag faces for visual distinction
(setq org-tag-faces
      '(("@work" . (:foreground "blue" :weight bold))
        ("@home" . (:foreground "green" :weight bold))
        ("@office" . (:foreground "navy" :weight bold))
        ("@computer" . (:foreground "purple" :weight bold))
        ("@phone" . (:foreground "orange" :weight bold))
        ("@errands" . (:foreground "brown" :weight bold))
        ("@agenda" . (:foreground "red" :weight bold))
        ("@high_energy" . (:foreground "red" :weight bold))
        ("@low_energy" . (:foreground "gray" :weight bold))
        ("@creative" . (:foreground "magenta" :weight bold))
        ("@administrative" . (:foreground "brown" :weight bold))
        ("@5min" . (:foreground "lightgreen" :weight bold))
        ("@15min" . (:foreground "green" :weight bold))
        ("@30min" . (:foreground "darkgreen" :weight bold))
        ("@1hr" . (:foreground "orange" :weight bold))
        ("@2hr" . (:foreground "red" :weight bold))
        ("@personal" . (:foreground "purple" :weight bold))
        ("@project" . (:foreground "blue" :weight bold))
        ("@learning" . (:foreground "cyan" :weight bold))
        ("@health" . (:foreground "green" :weight bold))
        ("@finance" . (:foreground "darkred" :weight bold))))

;; Fast tag selection
(setq org-fast-tag-selection-single-key t
      org-use-fast-todo-selection t)
#+end_src

** GTD Archive Configuration
#+begin_src emacs-lisp
;; ======================================
;; GTD Archive Configuration
;; ======================================

;; Configure archive location with hierarchy preservation
(setq org-archive-location (concat (rk/org-file "archive.org") "::* Archived Tasks"))

;; Preserve context and hierarchy in archives
(setq org-archive-save-context-info '(time file ltags itags todo category olpath))

;; Hook to add timestamp when archiving
(defun rk/org-archive-add-timestamp ()
  "Add timestamp property when archiving items."
  (org-set-property "ARCHIVED" (format-time-string "[%Y-%m-%d %a %H:%M]")))

(add-hook 'org-archive-hook 'rk/org-archive-add-timestamp)

;; Bulk archive functions for GTD workflow
(defun rk/archive-done-tasks ()
  "Archive all DONE, CANCELLED, COMPLETED, and DECIDED items in current buffer."
  (interactive)
  (let ((archived-count 0))
    (org-map-entries
     (lambda ()
       (when (member (org-get-todo-state) '("DONE" "CANCELLED" "COMPLETED" "DECIDED"))
         (org-archive-subtree)
         (setq archived-count (1+ archived-count))))
     nil 'file)
    (message "Archived %d completed items" archived-count)))

(defun rk/archive-old-tasks (&optional days)
  "Archive tasks older than DAYS (default 30) that are completed."
  (interactive "P")
  (let* ((cutoff-days (or days 30))
         (cutoff-time (time-subtract (current-time) 
                                   (days-to-time cutoff-days)))
         (archived-count 0))
    (org-map-entries
     (lambda ()
       (let* ((todo-state (org-get-todo-state))
              (timestamp (org-entry-get (point) "CLOSED")))
         (when (and (member todo-state '("DONE" "CANCELLED" "COMPLETED" "DECIDED"))
                    timestamp
                    (time-less-p (org-time-string-to-time timestamp) cutoff-time))
           (org-archive-subtree)
           (setq archived-count (1+ archived-count)))))
     nil 'file)
    (message "Archived %d old completed items (older than %d days)" 
             archived-count cutoff-days)))

(defun rk/validate-archive-structure ()
  "Validate archive file structure and report any issues."
  (interactive)
  (let* ((archive-file (rk/org-file "archive.org"))
         (issues '()))
    
    (if (file-exists-p archive-file)
        (progn
          (with-current-buffer (find-file-noselect archive-file)
            ;; Check for proper structure
            (goto-char (point-min))
            (unless (re-search-forward "^\\* Archived Tasks" nil t)
              (push "Missing 'Archived Tasks' top-level heading" issues))
            
            ;; Check for orphaned entries
            (goto-char (point-min))
            (while (re-search-forward "^\\*\\* " nil t)
              (let ((props (org-entry-properties)))
                (unless (assoc "ARCHIVED" props)
                  (push (format "Entry at line %d missing ARCHIVED property" 
                               (line-number-at-pos)) issues)))))
          
          (if issues
              (message "⚠️  Archive validation found %d issues:\n%s" 
                      (length issues) (string-join issues "\n"))
            (message "✅ Archive structure is valid")))
      (message "❌ Archive file does not exist: %s" archive-file))))

(defun rk/clean-empty-archive-sections ()
  "Remove empty sections from archive file."
  (interactive)
  (let* ((archive-file (rk/org-file "archive.org"))
         (cleaned-count 0))
    
    (when (file-exists-p archive-file)
      (with-current-buffer (find-file-noselect archive-file)
        (org-map-entries
         (lambda ()
           (when (and (org-entry-is-todo-p)
                      (not (org-goto-first-child)))
             ;; This is a heading with no children
             (org-cut-subtree)
             (setq cleaned-count (1+ cleaned-count))))
         nil 'file)
        (when (> cleaned-count 0)
          (save-buffer)))
      
      (message "Cleaned %d empty sections from archive" cleaned-count))))

;; Test function for archive system
(defun rk/test-archive-system ()
  "Test the archive system with sample data."
  (interactive)
  (let ((test-buffer "*GTD Archive Test*"))
    (with-current-buffer (get-buffer-create test-buffer)
      (org-mode)
      (erase-buffer)
      (insert "#+TITLE: Archive System Test\n\n")
      (insert "* TODO Test task 1 @work\n")
      (insert "* DONE Test completed task @home\n")
      (insert "  CLOSED: [2025-06-01 Sun 10:00]\n")
      (insert "* CANCELLED Old cancelled task @office\n")
      (insert "  CLOSED: [2025-05-01 Thu 14:30]\n")
      (insert "* NEXT Active task @computer\n")
      (save-buffer))
    
    (switch-to-buffer test-buffer)
    (message "✅ Test buffer created. Try: (rk/archive-done-tasks) or (rk/validate-archive-structure)")))
#+end_src

** GTD Capture Templates Configuration
#+begin_src emacs-lisp
;; ======================================
;; GTD Capture Templates Configuration
;; ======================================

;; Configure capture templates for GTD workflow
(setq org-capture-templates
      '(;; Basic GTD Templates
        ("i" "Inbox" entry
         (file (lambda () (rk/org-file "inbox.org")))
         "* TODO %?\n  :PROPERTIES:\n  :CREATED: %U\n  :END:\n"
         :empty-lines 1)
        
        ("w" "Work Templates")
        ("wt" "Work Task" entry
         (file+headline (lambda () (rk/org-file "gtd.org" "work")) "Tasks")
         "* TODO %? @work\n  :PROPERTIES:\n  :CREATED: %U\n  :EFFORT: %^{Effort|0:15|0:30|1:00|2:00|4:00}\n  :END:\n  %^{Scheduled}t"
         :empty-lines 1)
        
        ("wp" "Work Project" entry
         (file+headline (lambda () (rk/org-file "projects.org" "work")) "Active Projects")
         "* PROJECT %? @work @project\n  :PROPERTIES:\n  :CREATED: %U\n  :END:\n\n** Purpose/Outcome\n   %^{Purpose}\n\n** Next Actions\n*** TODO %^{First Action}\n"
         :empty-lines 1)
        
        ("p" "Personal Templates")
        ("pt" "Personal Task" entry
         (file+headline (lambda () (rk/org-file "gtd.org" "personal")) "Tasks")
         "* TODO %? @personal\n  :PROPERTIES:\n  :CREATED: %U\n  :EFFORT: %^{Effort|0:15|0:30|1:00|2:00}\n  :END:\n  %^{Scheduled}t"
         :empty-lines 1)
        
        ("pp" "Personal Project" entry
         (file+headline (lambda () (rk/org-file "projects.org" "personal")) "Active Projects")
         "* PROJECT %? @personal @project\n  :PROPERTIES:\n  :CREATED: %U\n  :END:\n\n** Purpose/Outcome\n   %^{Purpose}\n\n** Next Actions\n*** TODO %^{First Action}\n"
         :empty-lines 1)
        
        ("n" "Quick Note" entry
         (file (lambda () (rk/org-file "inbox.org")))
         "* %?\n  :PROPERTIES:\n  :CREATED: %U\n  :END:\n"
         :empty-lines 1
         :immediate-finish t)
        
        ("s" "Someday/Maybe" entry
         (file+headline (lambda () (rk/org-file "someday.org" "work")) "Someday/Maybe")
         "* SOMEDAY %?\n  :PROPERTIES:\n  :CREATED: %U\n  :END:\n"
         :empty-lines 1)
        
        ;; Advanced capture templates
        ("m" "Meeting Templates")
        ("mm" "Meeting" entry
         (file+headline (lambda () (rk/org-file "gtd.org" "work")) "Meetings")
         "* NEXT Meeting: %? @work @agenda\n  SCHEDULED: %^{Meeting time}T\n  :PROPERTIES:\n  :CREATED: %U\n  :ATTENDEES: %^{Attendees}\n  :LOCATION: %^{Location|Office|Remote|Conference Room}\n  :END:\n\n** Agenda\n   %^{Agenda}\n\n** Notes\n\n** Action Items\n"
         :empty-lines 1)
        
        ("mi" "Interruption Log" entry
         (file (lambda () (rk/org-file "inbox.org")))
         "* NEXT Handle: %? @high_energy\n  :PROPERTIES:\n  :CREATED: %U\n  :INTERRUPTED_FROM: %^{What were you working on?}\n  :INTERRUPTION_TYPE: %^{Type|Email|Phone|Person|System|Other}\n  :END:\n"
         :clock-in t :clock-resume t :empty-lines 1)
        
        ("e" "Energy-Context Templates")
        ("eh" "High Energy Task" entry
         (file+headline (lambda () (rk/org-file "gtd.org" "work")) "High Energy Tasks")
         "* TODO %? @work @high_energy @creative\n  :PROPERTIES:\n  :CREATED: %U\n  :EFFORT: %^{Effort|1:00|2:00|4:00}\n  :ENERGY_REQUIRED: High\n  :END:\n  %^{Scheduled}t"
         :empty-lines 1)
        
        ("el" "Low Energy Task" entry
         (file+headline (lambda () (rk/org-file "gtd.org" "work")) "Low Energy Tasks")
         "* TODO %? @work @low_energy @administrative\n  :PROPERTIES:\n  :CREATED: %U\n  :EFFORT: %^{Effort|0:15|0:30|1:00}\n  :ENERGY_REQUIRED: Low\n  :END:\n  %^{Scheduled}t"
         :empty-lines 1)
        
        ("E" "Email Task" entry
         (file (lambda () (rk/org-file "inbox.org")))
         "* TODO %^{Task description} @computer @email\n  :PROPERTIES:\n  :CREATED: %U\n  :EMAIL_FROM: %^{From}\n  :EMAIL_SUBJECT: %^{Subject}\n  :EMAIL_DATE: %^{Email date}T\n  :END:\n\n** Email Content\n   %?"
         :empty-lines 1)
        
        ("v" "Voice Note" entry
         (file (lambda () (rk/org-file "inbox.org")))
         "* TODO Process voice note: %?\n  :PROPERTIES:\n  :CREATED: %U\n  :VOICE_FILE: %^{Voice file path}\n  :END:\n\n** Voice Note Summary\n   %^{Quick summary}\n\n** Action Required\n   %^{What needs to be done?}"
         :empty-lines 1)
        
        ("r" "Reading/Research" entry
         (file+headline (lambda () (rk/org-file "someday.org" "personal")) "Reading List")
         "* SOMEDAY Read: %? @learning\n  :PROPERTIES:\n  :CREATED: %U\n  :SOURCE: %^{Source|Book|Article|Paper|Video|Course}\n  :AUTHOR: %^{Author}\n  :URL: %^{URL (if applicable)}\n  :PRIORITY: %^{Priority|High|Medium|Low}\n  :END:\n\n** Why Important\n   %^{Why do you want to read this?}\n\n** Key Questions\n   %^{What questions should this answer?}"
         :empty-lines 1)
        
        ("h" "Habit Tracking" entry
         (file+headline (lambda () (rk/org-file "gtd.org" "personal")) "Habits")
         "* TODO %? @health @routine\n  :PROPERTIES:\n  :CREATED: %U\n  :HABIT_TYPE: %^{Type|Health|Learning|Work|Social}\n  :FREQUENCY: %^{Frequency|Daily|Weekly|Monthly}\n  :TRIGGER: %^{What triggers this habit?}\n  :REWARD: %^{What's the reward?}\n  :END:\n\n** Habit Details\n   %^{Specific details about the habit}\n\n** Tracking\n   - [ ] %^{First milestone or day}"
         :empty-lines 1)))

;; Capture template helper functions
(defun rk/capture-inbox ()
  "Quick capture to inbox."
  (interactive)
  (org-capture nil "i"))

(defun rk/capture-work-task ()
  "Quick capture work task."
  (interactive)
  (org-capture nil "wt"))

(defun rk/capture-personal-task ()
  "Quick capture personal task."
  (interactive)
  (org-capture nil "pt"))

(defun rk/capture-note ()
  "Quick capture note (immediate finish)."
  (interactive)
  (org-capture nil "n"))

;; Legacy capture functions for backward compatibility
(defun rk/org-inbox-capture ()
  "Quickly capture to inbox."
  (interactive)
  (org-capture nil "i"))

(defun rk/org-work-capture ()
  "Quickly capture work task."
  (interactive)
  (org-capture nil "wt"))

(defun rk/org-personal-capture ()
  "Quickly capture personal task."
  (interactive)
  (org-capture nil "pt"))
#+end_src

** GTD Custom Agenda Commands
#+begin_src emacs-lisp
;; ======================================
;; GTD Custom Agenda Commands
;; ======================================

;; Configure agenda files for GTD system
(setq org-agenda-files
      (list (rk/org-file "inbox.org")
            (rk/org-file "gtd.org" "work")
            (rk/org-file "projects.org" "work")
            (rk/org-file "gtd.org" "personal")
            (rk/org-file "projects.org" "personal")))

;; Custom agenda commands for GTD workflow
(setq org-agenda-custom-commands
      '(("g" "GTD Dashboards")
        
        ("gw" "Work Dashboard" 
         ((agenda "" ((org-agenda-span 'day)
                      (org-agenda-files (list (rk/org-file "gtd.org" "work")
                                               (rk/org-file "projects.org" "work")))
                      (org-agenda-overriding-header "📊 Work Dashboard - Today's Focus\n")))
          (todo "NEXT" ((org-agenda-files (list (rk/org-file "gtd.org" "work")
                                                 (rk/org-file "projects.org" "work")))
                        (org-agenda-overriding-header "\n🚀 Next Actions - Work\n")))
          (todo "WAITING" ((org-agenda-files (list (rk/org-file "gtd.org" "work")
                                                    (rk/org-file "projects.org" "work")))
                           (org-agenda-overriding-header "\n⏳ Waiting For - Work\n")))
          (todo "PROJECT" ((org-agenda-files (list (rk/org-file "projects.org" "work")))
                           (org-agenda-overriding-header "\n📋 Active Projects - Work\n"))))
         ((org-agenda-compact-blocks t)
          (org-agenda-remove-tags t)))
        
        ("gp" "Personal Dashboard"
         ((agenda "" ((org-agenda-span 'day)
                      (org-agenda-files (list (rk/org-file "gtd.org" "personal")
                                               (rk/org-file "projects.org" "personal")))
                      (org-agenda-overriding-header "🏠 Personal Dashboard - Today's Focus\n")))
          (todo "NEXT" ((org-agenda-files (list (rk/org-file "gtd.org" "personal")
                                                 (rk/org-file "projects.org" "personal")))
                        (org-agenda-overriding-header "\n🚀 Next Actions - Personal\n")))
          (todo "TODO" ((org-agenda-files (list (rk/org-file "gtd.org" "personal")))
                        (org-agenda-overriding-header "\n📝 Tasks - Personal\n")))
          (todo "PROJECT" ((org-agenda-files (list (rk/org-file "projects.org" "personal")))
                           (org-agenda-overriding-header "\n📋 Active Projects - Personal\n"))))
         ((org-agenda-compact-blocks t)
          (org-agenda-remove-tags t)))
        
        ("gu" "Unified Dashboard"
         ((agenda "" ((org-agenda-span 'day)
                      (org-agenda-overriding-header "🌟 Unified Dashboard - Complete Overview\n")))
          (todo "NEXT" ((org-agenda-overriding-header "\n🚀 All Next Actions\n")))
          (todo "WAITING" ((org-agenda-overriding-header "\n⏳ All Waiting Items\n")))
          (todo "PROJECT" ((org-agenda-overriding-header "\n📋 All Active Projects\n")))
          (tags "PRIORITY=\"A\"" ((org-agenda-overriding-header "\n🔥 High Priority Items\n"))))
         ((org-agenda-compact-blocks t)))
        
        ("gi" "Inbox Processing"
         ((todo "TODO" ((org-agenda-files (list (rk/org-file "inbox.org")))
                        (org-agenda-overriding-header "📥 Inbox - Items to Process\n")))
          (tags "CATEGORY=\"inbox\"" ((org-agenda-overriding-header "\n📝 Notes to Review\n"))))
         ((org-agenda-compact-blocks t)))
        
        ;; Specialized agenda views
        ("e" "Energy-Based Views")
        
        ("eh" "High Energy Tasks"
         ((todo "NEXT|TODO" ((org-agenda-tag-filter-preset '("+@high_energy"))
                             (org-agenda-overriding-header "⚡ High Energy Tasks - Creative & Complex Work\n")))
          (todo "NEXT|TODO" ((org-agenda-tag-filter-preset '("+@creative"))
                             (org-agenda-overriding-header "\n🎨 Creative Tasks\n"))))
         ((org-agenda-compact-blocks t)))
        
        ("el" "Low Energy Tasks"
         ((todo "NEXT|TODO" ((org-agenda-tag-filter-preset '("+@low_energy"))
                             (org-agenda-overriding-header "🔋 Low Energy Tasks - Administrative & Routine\n")))
          (todo "NEXT|TODO" ((org-agenda-tag-filter-preset '("+@administrative"))
                             (org-agenda-overriding-header "\n📋 Administrative Tasks\n"))))
         ((org-agenda-compact-blocks t)))
        
        ("f" "Focus Mode - Top 3 Priorities"
         ((todo "NEXT" ((org-agenda-max-entries 3)
                        (org-agenda-sorting-strategy '(priority-down effort-up))
                        (org-agenda-overriding-header "🎯 Focus Mode - Top 3 Next Actions\n")))
          (tags "PRIORITY=\"A\"" ((org-agenda-max-entries 3)
                                  (org-agenda-overriding-header "\n🔥 High Priority Items\n"))))
         ((org-agenda-compact-blocks t)))
        
        ("P" "Project Overview"
         ((todo "PROJECT" ((org-agenda-overriding-header "📋 Active Projects Overview\n")))
          (todo "NEXT" ((org-agenda-tag-filter-preset '("+@project"))
                        (org-agenda-overriding-header "\n🚀 Project Next Actions\n")))
          (todo "WAITING" ((org-agenda-tag-filter-preset '("+@project"))
                           (org-agenda-overriding-header "\n⏳ Project Waiting Items\n"))))
         ((org-agenda-compact-blocks t)))
        
        ("s" "Stalled & Review Items"
         ((todo "WAITING" ((org-agenda-overriding-header "⏳ All Waiting Items - Review These\n")))
          (todo "SOMEDAY" ((org-agenda-overriding-header "\n🤔 Someday/Maybe - Review Regularly\n")))
          (tags "TODO<=\"<-7d>\"" ((org-agenda-overriding-header "\n🕰️ Old Tasks (>7 days) - Review or Archive\n"))))
         ((org-agenda-compact-blocks t)))
        
        ("c" "Context Views")
        
        ("cw" "Work Context"
         ((todo "NEXT|TODO" ((org-agenda-tag-filter-preset '("+@work"))
                             (org-agenda-overriding-header "💼 Work Context - All Work Tasks\n"))))
         ((org-agenda-compact-blocks t)))
        
        ("ch" "Home Context"
         ((todo "NEXT|TODO" ((org-agenda-tag-filter-preset '("+@home"))
                             (org-agenda-overriding-header "🏠 Home Context - All Home Tasks\n"))))
         ((org-agenda-compact-blocks t)))
        
        ("cc" "Computer Context"
         ((todo "NEXT|TODO" ((org-agenda-tag-filter-preset '("+@computer"))
                             (org-agenda-overriding-header "💻 Computer Context - Digital Tasks\n"))))
         ((org-agenda-compact-blocks t)))
        
        ("cp" "Phone/Calls Context"
         ((todo "NEXT|TODO" ((org-agenda-tag-filter-preset '("+@phone"))
                             (org-agenda-overriding-header "📞 Phone Context - Calls & Communication\n"))))
         ((org-agenda-compact-blocks t)))
        
        ("ce" "Errands Context"
         ((todo "NEXT|TODO" ((org-agenda-tag-filter-preset '("+@errands"))
                             (org-agenda-overriding-header "🚗 Errands Context - Out & About Tasks\n"))))
         ((org-agenda-compact-blocks t)))
        
        ("t" "Time-Based Views")
        
        ("tq" "Quick Tasks (≤30min)"
         ((todo "NEXT|TODO" ((org-agenda-tag-filter-preset '("+@5min" "+@15min" "+@30min"))
                             (org-agenda-overriding-header "⚡ Quick Tasks - Fill Small Time Slots\n"))))
         ((org-agenda-compact-blocks t)))
        
        ("td" "Deep Work (≥1hr)"
         ((todo "NEXT|TODO" ((org-agenda-tag-filter-preset '("+@1hr" "+@2hr"))
                             (org-agenda-overriding-header "🔬 Deep Work - Extended Focus Sessions\n"))))
         ((org-agenda-compact-blocks t)))))

;; Dashboard navigation functions
(defun rk/agenda-work-dashboard ()
  "Open work dashboard."
  (interactive)
  (org-agenda nil "gw"))

(defun rk/agenda-personal-dashboard ()
  "Open personal dashboard."
  (interactive)
  (org-agenda nil "gp"))

(defun rk/agenda-unified-dashboard ()
  "Open unified dashboard."
  (interactive)
  (org-agenda nil "gu"))

(defun rk/agenda-inbox-processing ()
  "Open inbox processing view."
  (interactive)
  (org-agenda nil "gi"))

;; Quick dashboard switching
(defun rk/switch-dashboard ()
  "Quick switch between dashboards."
  (interactive)
  (let ((choice (completing-read "Dashboard: " 
                                '("Work" "Personal" "Unified" "Inbox Processing"))))
    (cond
     ((string= choice "Work") (rk/agenda-work-dashboard))
     ((string= choice "Personal") (rk/agenda-personal-dashboard))
     ((string= choice "Unified") (rk/agenda-unified-dashboard))
     ((string= choice "Inbox Processing") (rk/agenda-inbox-processing)))))
#+end_src

** GTD Refile Configuration
#+begin_src emacs-lisp
;; ======================================
;; GTD Refile Configuration
;; ======================================

;; Configure refile targets for GTD system
(setq org-refile-targets
      '((nil :maxlevel . 3)  ; Current buffer up to level 3
        ((rk/org-file "gtd.org" "work") :maxlevel . 2)
        ((rk/org-file "projects.org" "work") :maxlevel . 2)
        ((rk/org-file "someday.org" "work") :maxlevel . 2)
        ((rk/org-file "gtd.org" "personal") :maxlevel . 2)
        ((rk/org-file "projects.org" "personal") :maxlevel . 2)
        ((rk/org-file "someday.org" "personal") :maxlevel . 2)
        ((rk/org-file "archive.org") :maxlevel . 1)))

;; Refile settings for better workflow
(setq org-refile-use-outline-path 'file
      org-outline-path-complete-in-steps nil
      org-refile-allow-creating-parent-nodes 'confirm
      org-refile-use-cache t)

;; Smart refile functions
(defun rk/refile-to-work-gtd ()
  "Quick refile to work GTD tasks."
  (interactive)
  (org-refile nil nil (list "Tasks" (rk/org-file "gtd.org" "work") nil)))

(defun rk/refile-to-personal-gtd ()
  "Quick refile to personal GTD tasks."
  (interactive)
  (org-refile nil nil (list "Tasks" (rk/org-file "gtd.org" "personal") nil)))

(defun rk/refile-to-work-projects ()
  "Quick refile to work projects."
  (interactive)
  (org-refile nil nil (list "Active Projects" (rk/org-file "projects.org" "work") nil)))

(defun rk/refile-to-personal-projects ()
  "Quick refile to personal projects."
  (interactive)
  (org-refile nil nil (list "Active Projects" (rk/org-file "projects.org" "personal") nil)))

(defun rk/refile-to-someday ()
  "Quick refile to someday/maybe based on context."
  (interactive)
  (let* ((tags (org-get-tags))
         (is-work (member "@work" tags))
         (target-file (if is-work 
                         (rk/org-file "someday.org" "work")
                       (rk/org-file "someday.org" "personal"))))
    (org-refile nil nil (list "Someday/Maybe" target-file nil))))

;; Context-aware refile suggestions
(defun rk/smart-refile ()
  "Intelligently suggest refile targets based on context."
  (interactive)
  (let* ((tags (org-get-tags))
         (todo-state (org-get-todo-state))
         (is-work (member "@work" tags))
         (is-project (member "@project" tags))
         (suggestions '()))
    
    ;; Build context-aware suggestions
    (cond
     ;; Project items
     (is-project
      (if is-work
          (push "Work Projects" suggestions)
        (push "Personal Projects" suggestions)))
     
     ;; Someday items
     ((member todo-state '("SOMEDAY"))
      (push "Someday/Maybe" suggestions))
     
     ;; Regular tasks
     (t
      (if is-work
          (push "Work Tasks" suggestions)
        (push "Personal Tasks" suggestions))))
    
    ;; Always offer inbox as fallback
    (push "Inbox" suggestions)
    
    ;; Let user choose
    (let ((choice (completing-read "Refile to: " suggestions)))
      (cond
       ((string= choice "Work Tasks") (rk/refile-to-work-gtd))
       ((string= choice "Personal Tasks") (rk/refile-to-personal-gtd))
       ((string= choice "Work Projects") (rk/refile-to-work-projects))
       ((string= choice "Personal Projects") (rk/refile-to-personal-projects))
       ((string= choice "Someday/Maybe") (rk/refile-to-someday))
       ((string= choice "Inbox") (org-refile nil nil (list "Inbox" (rk/org-file "inbox.org") nil)))))))

;; Refile verification and validation
(defun rk/validate-refile-target (target)
  "Validate that refile target is appropriate."
  (let* ((target-file (nth 1 target))
         (target-heading (nth 0 target)))
    
    ;; Check if target file exists
    (unless (file-exists-p target-file)
      (error "Target file does not exist: %s" target-file))
    
    ;; Warn about cross-context refiling
    (when (and (org-get-tags)
               (member "@work" (org-get-tags))
               (string-match-p "personal" target-file))
      (unless (y-or-n-p "Refiling work item to personal context. Continue? ")
        (error "Refile cancelled")))
    
    (when (and (org-get-tags)
               (member "@personal" (org-get-tags))
               (string-match-p "work" target-file))
      (unless (y-or-n-p "Refiling personal item to work context. Continue? ")
        (error "Refile cancelled")))
    
    target))

;; Hook validation into refile process
(advice-add 'org-refile :before 
            (lambda (&optional arg default-buffer rfloc redisplay-agenda)
              (when rfloc (rk/validate-refile-target rfloc))))

;; Bulk refile operations
(defun rk/bulk-refile-done-items ()
  "Bulk refile all DONE items in current buffer."
  (interactive)
  (let ((refile-count 0))
    (org-map-entries
     (lambda ()
       (when (member (org-get-todo-state) '("DONE" "CANCELLED" "COMPLETED"))
         (call-interactively 'org-refile)
         (setq refile-count (1+ refile-count))))
     nil 'file)
    (message "Refiled %d completed items" refile-count)))

;; Recent refile history
(defvar rk/refile-history '()
  "History of recent refile targets.")

(defun rk/add-to-refile-history (target)
  "Add TARGET to refile history."
  (setq rk/refile-history 
        (delete-dups (cons target rk/refile-history)))
  (when (> (length rk/refile-history) 10)
    (setq rk/refile-history (butlast rk/refile-history))))

(defun rk/refile-to-recent ()
  "Refile to a recent target."
  (interactive)
  (if rk/refile-history
      (let* ((choices (mapcar (lambda (target)
                               (format "%s (%s)" (nth 0 target) (nth 1 target)))
                             rk/refile-history))
             (choice (completing-read "Recent refile targets: " choices))
             (index (position choice choices :test 'string=)))
        (when index
          (org-refile nil nil (nth index rk/refile-history))))
    (message "No recent refile history available")))

;; Track refile history
(advice-add 'org-refile :after
            (lambda (&optional arg default-buffer rfloc redisplay-agenda)
              (when rfloc (rk/add-to-refile-history rfloc))))
#+end_src

** GTD Context Switching System
#+begin_src emacs-lisp
;; ======================================
;; GTD Context Switching System
;; ======================================

;; Context mode state tracking
(defvar rk/org-context-mode 'unified
  "Current GTD context mode: 'work, 'personal, or 'unified.")

(defvar rk/org-context-file (expand-file-name ".org-context-mode" rk/org-gtd-base-dir)
  "File to persist context mode between sessions.")

;; Core context mode functions
(defun rk/org-work-mode ()
  "Switch to work-only GTD context."
  (interactive)
  (setq rk/org-context-mode 'work)
  (rk/org-update-agenda-files)
  (rk/org-save-context-mode)
  (message "📊 GTD Context: Work-only mode activated"))

(defun rk/org-personal-mode ()
  "Switch to personal-only GTD context."
  (interactive)
  (setq rk/org-context-mode 'personal)
  (rk/org-update-agenda-files)
  (rk/org-save-context-mode)
  (message "🏠 GTD Context: Personal-only mode activated"))

(defun rk/org-unified-mode ()
  "Switch to unified GTD context (work + personal)."
  (interactive)
  (setq rk/org-context-mode 'unified)
  (rk/org-update-agenda-files)
  (rk/org-save-context-mode)
  (message "🌟 GTD Context: Unified mode activated"))

;; Dynamic agenda file management
(defun rk/org-update-agenda-files ()
  "Update org-agenda-files based on current context mode."
  (setq org-agenda-files
        (cond
         ((eq rk/org-context-mode 'work)
          (list (rk/org-file "inbox.org")
                (rk/org-file "gtd.org" "work")
                (rk/org-file "projects.org" "work")
                (rk/org-file "someday.org" "work")))
         
         ((eq rk/org-context-mode 'personal)
          (list (rk/org-file "inbox.org")
                (rk/org-file "gtd.org" "personal")
                (rk/org-file "projects.org" "personal")
                (rk/org-file "someday.org" "personal")))
         
         (t ; unified mode
          (list (rk/org-file "inbox.org")
                (rk/org-file "gtd.org" "work")
                (rk/org-file "projects.org" "work")
                (rk/org-file "someday.org" "work")
                (rk/org-file "gtd.org" "personal")
                (rk/org-file "projects.org" "personal")
                (rk/org-file "someday.org" "personal"))))))

;; Context persistence functions
(defun rk/org-save-context-mode ()
  "Save current context mode to file for persistence."
  (with-temp-file rk/org-context-file
    (insert (symbol-name rk/org-context-mode))))

(defun rk/org-load-context-mode ()
  "Load context mode from file, defaulting to unified if not found."
  (when (file-exists-p rk/org-context-file)
    (with-temp-buffer
      (insert-file-contents rk/org-context-file)
      (let ((saved-mode (intern (string-trim (buffer-string)))))
        (when (memq saved-mode '(work personal unified))
          (setq rk/org-context-mode saved-mode)
          (rk/org-update-agenda-files)
          (message "📋 GTD Context: Restored %s mode from previous session"
                   (capitalize (symbol-name saved-mode))))))))

;; Context status and information
(defun rk/org-current-context ()
  "Return string description of current context mode."
  (cond
   ((eq rk/org-context-mode 'work) "Work")
   ((eq rk/org-context-mode 'personal) "Personal")
   (t "Unified")))

(defun rk/org-context-status ()
  "Display current context mode and active files."
  (interactive)
  (let* ((mode-desc (rk/org-current-context))
         (file-count (length org-agenda-files))
         (files-desc (mapconcat 
                     (lambda (f) (file-name-nondirectory f))
                     org-agenda-files ", ")))
    (message "📋 GTD Context: %s mode (%d files: %s)" 
             mode-desc file-count files-desc)))

;; Initialize context mode on startup
(defun rk/org-initialize-context ()
  "Initialize GTD context system on startup."
  (rk/org-load-context-mode)
  (unless (eq rk/org-context-mode 'unified)
    (rk/org-update-agenda-files)))

;; Hook into org-mode loading
(with-eval-after-load 'org
  (rk/org-initialize-context))

;; Context-aware helper functions
(defun rk/org-context-capture-templates ()
  "Get capture templates filtered by current context mode."
  (let ((all-templates org-capture-templates)
        (filtered-templates '()))
    (dolist (template all-templates)
      (let* ((key (car template))
             (desc (cadr template))
             (is-work-template (or (string-match-p "work\\|Work" (or desc ""))
                                  (string-match-p "@work" (or (nth 3 template) ""))))
             (is-personal-template (or (string-match-p "personal\\|Personal" (or desc ""))
                                      (string-match-p "@personal" (or (nth 3 template) "")))))
        
        ;; Include template based on context mode
        (cond
         ((eq rk/org-context-mode 'work)
          (when (or (not (or is-work-template is-personal-template))  ; neutral templates
                    is-work-template)  ; work templates
            (push template filtered-templates)))
         
         ((eq rk/org-context-mode 'personal)
          (when (or (not (or is-work-template is-personal-template))  ; neutral templates
                    is-personal-template)  ; personal templates
            (push template filtered-templates)))
         
         (t ; unified mode - include all templates
          (push template filtered-templates)))))
    
    (reverse filtered-templates)))

(defun rk/org-context-aware-capture ()
  "Start capture with context-filtered templates."
  (interactive)
  (let ((org-capture-templates (rk/org-context-capture-templates)))
    (org-capture)))

;; Visual feedback functions
(defun rk/org-show-context-status ()
  "Show temporary context status display."
  (let* ((mode-desc (rk/org-current-context))
         (mode-icon (cond
                     ((eq rk/org-context-mode 'work) "📊")
                     ((eq rk/org-context-mode 'personal) "🏠")
                     (t "🌟")))
         (file-count (length org-agenda-files))
         (message-text (format "%s GTD Context: %s mode (%d agenda files active)"
                              mode-icon mode-desc file-count)))
    (message message-text)
    ;; Also show as temporary overlay
    (let ((overlay (make-overlay (point) (point))))
      (overlay-put overlay 'after-string 
                   (propertize (concat " [" mode-desc " Mode]")
                              'face '(:foreground "orange" :weight bold)))
      (run-with-timer 2 nil (lambda () (delete-overlay overlay))))))

;; Modeline integration
(defun rk/org-context-modeline-indicator ()
  "Return modeline indicator for current GTD context."
  (let ((mode-desc (rk/org-current-context)))
    (cond
     ((eq rk/org-context-mode 'work)
      (propertize " [📊Work]" 'face '(:foreground "blue" :weight bold)))
     ((eq rk/org-context-mode 'personal)
      (propertize " [🏠Personal]" 'face '(:foreground "green" :weight bold)))
     (t
      (propertize " [🌟Unified]" 'face '(:foreground "purple" :weight bold))))))

;; Context switching hydra
(defhydra rk/org-context-hydra (:color blue :hint nil)
  "
^GTD Context Mode^
^────────────────^
_w_: 📊 Work mode
_p_: 🏠 Personal mode  
_u_: 🌟 Unified mode
_s_: Show status
_q_: Quit
"
  ("w" (rk/org-work-mode) "Work mode")
  ("p" (rk/org-personal-mode) "Personal mode")
  ("u" (rk/org-unified-mode) "Unified mode")
  ("s" (rk/org-context-status) "Show status" :color red)
  ("q" nil "Quit"))

;; Smart navigation functions
(defun rk/org-goto-context-gtd ()
  "Go to GTD file appropriate for current context."
  (interactive)
  (cond
   ((eq rk/org-context-mode 'work)
    (find-file (rk/org-file "gtd.org" "work")))
   ((eq rk/org-context-mode 'personal)
    (find-file (rk/org-file "gtd.org" "personal")))
   (t
    (let ((choice (completing-read "Which GTD file? " '("Work" "Personal"))))
      (if (string= choice "Work")
          (find-file (rk/org-file "gtd.org" "work"))
        (find-file (rk/org-file "gtd.org" "personal")))))))

(defun rk/org-goto-context-projects ()
  "Go to projects file appropriate for current context."
  (interactive)
  (cond
   ((eq rk/org-context-mode 'work)
    (find-file (rk/org-file "projects.org" "work")))
   ((eq rk/org-context-mode 'personal)
    (find-file (rk/org-file "projects.org" "personal")))
   (t
    (let ((choice (completing-read "Which projects file? " '("Work" "Personal"))))
      (if (string= choice "Work")
          (find-file (rk/org-file "projects.org" "work"))
        (find-file (rk/org-file "projects.org" "personal")))))))

;; Integration with existing agenda functions
(defun rk/org-context-dashboard ()
  "Open appropriate dashboard for current context."
  (interactive)
  (cond
   ((eq rk/org-context-mode 'work)
    (org-agenda nil "gw"))
   ((eq rk/org-context-mode 'personal)
    (org-agenda nil "gp"))
   (t
    (org-agenda nil "gu"))))

;; GTD Cheatsheet
(defun rk/org-gtd-cheatsheet ()
  "Display org-gtd keybinding cheatsheet."
  (interactive)
  (let ((cheatsheet "
ORG-GTD KEYBINDINGS CHEATSHEET (SPC o o ...)

CAPTURE (c):            AGENDA (a):           GO TO FILE (g):
  c   - capture           a   - agenda list     i   - inbox
  c i - inbox            w   - work view       t   - tutorial
  c t - task (context)   p   - personal view   u   - user guide
  c n - quick note       u   - unified view    g   - gtd (context)
  c p - project          f   - focus (top 3)   p   - projects

MODE (m):              REFILE (r):           CLOCK (k):
  w   - work mode        r   - refile          i   - clock in
  p   - personal mode    r r - refile hydra    o   - clock out
  u   - unified mode     w   - to work         j   - jump to clock
  m   - mode menu        p   - to personal     l   - clock in last

REVIEW (R):            ARCHIVE (A):          HELP:
  w   - weekly review    a   - archive task    h or ? - this help
  d   - daily review     d   - archive done    
  p   - process inbox    o   - archive old     

Current Mode: %s
"))
    (with-output-to-temp-buffer "*Org-GTD Cheatsheet*"
      (princ (format cheatsheet 
                     (upcase (symbol-name (or rk/org-context-mode 'unified))))))))

;; Context validation and health check
(defun rk/org-validate-context-files ()
  "Validate that all context files exist and are accessible."
  (interactive)
  (let ((missing-files '())
        (all-files (list (rk/org-file "inbox.org")
                         (rk/org-file "gtd.org" "work")
                         (rk/org-file "projects.org" "work")
                         (rk/org-file "someday.org" "work")
                         (rk/org-file "gtd.org" "personal")
                         (rk/org-file "projects.org" "personal")
                         (rk/org-file "someday.org" "personal"))))
    
    (dolist (file all-files)
      (unless (file-exists-p file)
        (push file missing-files)))
    
    (if missing-files
        (message "⚠️ Missing GTD files: %s" 
                 (mapconcat #'file-name-nondirectory missing-files ", "))
      (message "✅ All GTD context files are present and accessible"))))
#+end_src

** GTD Unified Keybinding System
#+begin_src emacs-lisp
;; ======================================
;; GTD Unified Keybinding System
;; ======================================

;; Enhanced keybinding setup function
(defun rk/setup-gtd-keybindings ()
  "Set up comprehensive GTD keybindings under SPC o o prefix."
  
  ;; Main GTD prefix
  (spacemacs/declare-prefix "oo" "GTD")
  
  ;; Core GTD operations
  (spacemacs/declare-prefix "ooc" "capture")
  (spacemacs/set-leader-keys 
    "ooci" 'rk/capture-inbox
    "oocw" 'rk/capture-work-task  
    "oocp" 'rk/capture-personal-task
    "oocn" 'rk/capture-note
    "oocc" 'rk/org-context-aware-capture  ; Smart context-aware capture
    "oocC" 'org-capture)  ; Standard capture with all templates
  
  ;; Agenda operations
  (spacemacs/declare-prefix "ooa" "agenda")
  (spacemacs/set-leader-keys
    "ooad" 'rk/org-context-dashboard     ; Context-aware dashboard
    "ooaw" 'rk/agenda-work-dashboard     ; Work dashboard
    "ooap" 'rk/agenda-personal-dashboard ; Personal dashboard
    "ooau" 'rk/agenda-unified-dashboard  ; Unified dashboard
    "ooai" 'rk/agenda-inbox-processing   ; Inbox processing
    "ooaf" (lambda () (interactive) (org-agenda nil "f"))  ; Focus mode
    "ooae" (lambda () (interactive) (org-agenda nil "eh")) ; High energy
    "ooas" (lambda () (interactive) (org-agenda nil "s"))  ; Stalled items
    "ooaP" (lambda () (interactive) (org-agenda nil "P"))  ; Project overview
    "ooaa" 'org-agenda)  ; Standard agenda
  
  ;; File navigation  
  (spacemacs/declare-prefix "oog" "goto")
  (spacemacs/set-leader-keys
    "oogi" 'rk/org-goto-inbox
    "oogw" (lambda () (interactive) (find-file (rk/org-file "gtd.org" "work")))
    "oogp" (lambda () (interactive) (find-file (rk/org-file "gtd.org" "personal")))
    "oogW" (lambda () (interactive) (find-file (rk/org-file "projects.org" "work")))
    "oogP" (lambda () (interactive) (find-file (rk/org-file "projects.org" "personal")))
    "oogs" (lambda () (interactive) (find-file (rk/org-file "someday.org" "work")))
    "oogS" (lambda () (interactive) (find-file (rk/org-file "someday.org" "personal")))
    "ooga" (lambda () (interactive) (find-file (rk/org-file "archive.org")))
    "oogg" 'rk/org-goto-context-gtd      ; Context-aware GTD file
    "oogj" 'rk/org-goto-context-projects ; Context-aware projects file
    "oogf" 'rk/switch-dashboard          ; Quick dashboard switching
    "oogt" (lambda () (interactive) (find-file (rk/org-file "gtd-tutorial.org")))    ; GTD Tutorial
    "oogu" (lambda () (interactive) (find-file (rk/org-file "gtd-users-guide.org")))) ; GTD User Guide
  
  ;; Help
  (spacemacs/declare-prefix "ooh" "help")
  (spacemacs/set-leader-keys
    "ooh" 'rk/org-gtd-cheatsheet
    "oo?" 'rk/org-gtd-cheatsheet)
  
  ;; Mode switching
  (spacemacs/declare-prefix "oom" "mode")
  (spacemacs/set-leader-keys
    "oomw" 'rk/org-work-mode      ; Work-only mode
    "oomp" 'rk/org-personal-mode  ; Personal-only mode  
    "oomu" 'rk/org-unified-mode   ; Unified mode
    "ooms" 'rk/org-context-status ; Show current status
    "oomh" 'rk/org-context-hydra/body  ; Context switching hydra
    "oomv" 'rk/org-validate-context-files  ; Validate files
    "oomS" 'rk/org-show-context-status))   ; Visual status display

;; Context-aware keybinding helpers
(defun rk/gtd-context-keybinding-hint (base-hint)
  "Add context information to keybinding hints."
  (let ((context-desc (rk/org-current-context)))
    (format "%s [%s mode]" base-hint context-desc)))

;; Dynamic keybinding descriptions
(defun rk/setup-dynamic-descriptions ()
  "Set up context-aware keybinding descriptions."
  (spacemacs/set-leader-keys 
    "oocc" `(rk/org-context-aware-capture 
             ,(rk/gtd-context-keybinding-hint "context capture"))
    "ooad" `(rk/org-context-dashboard 
             ,(rk/gtd-context-keybinding-hint "context dashboard"))
    "oogg" `(rk/org-goto-context-gtd 
             ,(rk/gtd-context-keybinding-hint "context GTD file"))
    "oogj" `(rk/org-goto-context-projects 
             ,(rk/gtd-context-keybinding-hint "context projects"))))

;; Quick access functions for common workflows
(defun rk/gtd-quick-capture ()
  "Quick capture with smart context awareness."
  (interactive)
  (cond
   ((eq rk/org-context-mode 'work)
    (org-capture nil "wt"))  ; Work task
   ((eq rk/org-context-mode 'personal)
    (org-capture nil "pt"))  ; Personal task
   (t
    (rk/org-context-aware-capture))))  ; Smart selection

(defun rk/gtd-quick-agenda ()
  "Quick agenda with smart context awareness."
  (interactive)
  (rk/org-context-dashboard))

(defun rk/gtd-quick-goto ()
  "Quick goto with smart context awareness."
  (interactive)
  (rk/org-goto-context-gtd))

;; Super quick access bindings
(spacemacs/set-leader-keys
  "ooo" 'rk/gtd-quick-capture   ; Super quick capture
  "oo SPC" 'rk/gtd-quick-agenda ; Super quick agenda
  "oo RET" 'rk/gtd-quick-goto)  ; Super quick goto

;; ======================================
;; GTD Extended Operations Keybindings
;; ======================================

;; Refile operations
(spacemacs/declare-prefix "oor" "refile")
(spacemacs/set-leader-keys
  "oor" 'org-refile
  "oora" 'rk/smart-refile         ; Smart context-aware refile
  "oorw" 'rk/refile-to-work-gtd
  "oorp" 'rk/refile-to-personal-gtd
  "oorW" 'rk/refile-to-work-projects
  "oorP" 'rk/refile-to-personal-projects
  "oors" 'rk/refile-to-someday
  "oorr" 'rk/refile-to-recent     ; Recent refile targets
  "oorb" 'rk/bulk-refile-done-items
  "oorv" 'org-archive-subtree)   ; Quick archive

;; Clock operations
(spacemacs/declare-prefix "ook" "clock")
(spacemacs/set-leader-keys
  "ooki" 'org-clock-in
  "ooko" 'org-clock-out
  "ookj" 'org-clock-goto
  "ookl" 'org-clock-in-last
  "ookr" 'org-clock-report
  "ookd" 'org-clock-display
  "ookc" 'org-clock-cancel
  "ooke" 'org-evaluate-time-range
  "ookt" 'org-timer-start
  "ookT" 'org-timer-stop)

;; Review operations
(spacemacs/declare-prefix "ooR" "review")
(spacemacs/set-leader-keys
  "ooRw" 'rk/org-weekly-review
  "ooRd" 'rk/org-daily-agenda
  "ooRp" 'rk/org-review-inbox
  "ooRs" (lambda () (interactive) (org-agenda nil "s"))  ; Stalled items
  "ooRa" 'rk/archive-done-tasks
  "ooRv" 'rk/validate-gtd-structure
  "ooRo" 'rk/archive-old-tasks)

;; Archive operations
(spacemacs/declare-prefix "ooA" "archive")
(spacemacs/set-leader-keys
  "ooAa" 'org-archive-subtree
  "ooAd" 'rk/archive-done-tasks
  "ooAo" 'rk/archive-old-tasks
  "ooAv" 'rk/validate-archive-structure
  "ooAc" 'rk/clean-empty-archive-sections
  "ooAt" 'rk/test-archive-system
  "ooAf" (lambda () (interactive) (find-file (rk/org-file "archive.org"))))

;; Extensions integration (updated for full functionality)
(spacemacs/declare-prefix "oox" "extensions")
(spacemacs/set-leader-keys
  "ooxt" 'rk/tangle-and-load-codelahoma-org
  "ooxr" 'rk/load-codelahoma-org-config
  "ooxp" 'rk/org-create-project-template
  "ooxw" 'rk/org-weekly-report
  "ooxc" 'switch-org-colors
  "ooxC" 'preview-org-colors
  "ooxb" 'rk/switch-org-bullets
  "ooxB" 'rk/preview-org-bullets
  "ooxm" 'rk/org-capture-meeting-notes
  "ooxd" 'rk/org-capture-decision)

;; Claude AI integration
(spacemacs/declare-prefix "ooxA" "claude")
(spacemacs/set-leader-keys
  "ooxAm" 'rk/ask-claude-about-gtd-manual
  "ooxAt" 'rk/ask-claude-about-gtd-tutorial
  "ooxAs" 'rk/start-claude-gtd-conversation
  "ooxAc" 'rk/continue-claude-gtd-conversation
  "ooxAq" 'rk/ask-claude-quick-gtd)

;; Help and discovery functions
(defun rk/org-gtd-cheatsheet ()
  "Display org-gtd keybinding cheatsheet."
  (interactive)
  (let ((cheatsheet "
ORG-GTD KEYBINDINGS (SPC o o ...)

CAPTURE (c):            AGENDA (a):           GO TO FILE (g):
  c   - capture           a   - agenda list     i   - inbox
  c i - inbox            w   - work view       g   - gtd (context)
  c t - task (context)   p   - personal view   p   - projects (context)
  c p - project          u   - unified view    w   - work gtd
  c n - quick note       f   - focus (top 3)   W   - work projects
                         s   - stalled items   P   - personal projects

MODE (m):              REFILE (r):           CLOCK (k):
  w   - work mode        r   - refile          i   - clock in
  p   - personal mode    a   - smart refile    o   - clock out
  u   - unified mode     w   - to work         j   - jump to clock
  s   - status           p   - to personal     l   - clock in last
  h   - mode hydra       s   - to someday      r   - clock report

REVIEW (R):            ARCHIVE (A):          EXTENSIONS (x):
  w   - weekly review    a   - archive task    t   - tangle config
  d   - daily agenda     d   - archive done    r   - reload config
  p   - process inbox    o   - archive old     p   - project template
  s   - stalled items    v   - validate        w   - weekly report
                         f   - go to archive   c   - switch colors

QUICK ACCESS:
  o   - quick capture    SPC - quick agenda    RET - quick goto

Current Mode: %s
"))
    (with-output-to-temp-buffer "*Org-GTD Cheatsheet*"
      (princ (format cheatsheet 
                     (upcase (symbol-name rk/org-context-mode)))))))

(defun rk/org-gtd-which-key-help ()
  "Show which-key help for org-gtd keybindings."
  (interactive)
  (which-key-show-keymap 'spacemacs-default-map "SPC o o"))

;; Help keybindings
(spacemacs/set-leader-keys
  "ooh" 'rk/org-gtd-cheatsheet
  "oo?" 'rk/org-gtd-cheatsheet
  "ooH" 'rk/org-gtd-which-key-help)

;; Which-key descriptions for extended bindings
(defun rk/setup-extended-which-key-descriptions ()
  "Set up which-key descriptions for all GTD keybindings."
  (which-key-add-key-based-replacements
    "SPC o o" "org-gtd"
    "SPC o o c" "capture"
    "SPC o o a" "agenda"
    "SPC o o g" "goto"
    "SPC o o m" "mode"
    "SPC o o r" "refile"
    "SPC o o k" "clock"
    "SPC o o R" "review"
    "SPC o o A" "archive"
    "SPC o o x" "extensions"))
#+end_src

** GTD Navigation Functions
#+begin_src emacs-lisp
(defun rk/org-goto-inbox ()
  "Go to inbox file."
  (interactive)
  (find-file (rk/org-file "inbox.org")))

(defun rk/org-goto-work ()
  "Go to work file."
  (interactive)
  (find-file (rk/org-file "work.org")))

(defun rk/org-goto-personal ()
  "Go to personal file."
  (interactive)
  (find-file (rk/org-file "personal.org")))

(defun rk/org-goto-projects ()
  "Go to projects file."
  (interactive)
  (find-file (rk/org-file "projects.org")))
#+end_src

** GTD Review and Agenda Functions
#+begin_src emacs-lisp
(defun rk/org-review-inbox ()
  "Review and process inbox items."
  (interactive)
  (find-file (rk/org-file "inbox.org"))
  (org-agenda nil "i"))

(defun rk/org-weekly-review ()
  "Start weekly review process."
  (interactive)
  (org-agenda nil "r"))

(defun rk/org-daily-agenda ()
  "Show unified daily agenda."
  (interactive)
  (org-agenda nil "u"))
#+end_src

* Appearance and Styling Functions

** Org Heading Color Schemes
#+begin_src emacs-lisp
(defvar org-heading-colors-schemes
  '(("Arctic"    . ("LightCyan" "AliceBlue" "LavenderBlue" "GhostWhite" "LightSteelBlue"))
    ("Autumn"    . ("OrangeRed" "DarkGoldenrod" "Sienna" "Peru" "Wheat4"))
    ("Candy"     . ("HotPink" "DeepPink" "VioletRed" "MediumVioletRed" "RosyBrown"))
    ("Cyber"     . ("DeepPink" "Cyan" "SpringGreen" "BlueViolet" "DimGray"))
    ("Desert"    . ("Tan4" "SandyBrown" "PeachPuff3" "Wheat4" "Bisque4"))
    ("Earth"     . ("Sienna" "RosyBrown" "DarkKhaki" "Tan" "Wheat4"))
    ("Forest"    . ("ForestGreen" "OliveDrab" "DarkOliveGreen" "YellowGreen" "DarkSeaGreen"))
    ("Galaxy"    . ("MediumSlateBlue" "MediumPurple" "Purple" "DarkViolet" "SlateGray"))
    ("Garden"    . ("MediumSeaGreen" "DarkSeaGreen" "PaleGreen" "LightGreen" "Gray"))
    ("Meadow"    . ("MediumAquamarine" "PaleGreen" "LightGreen" "DarkSeaGreen" "LightSlateGray"))
    ("Mountain"  . ("RoyalBlue4" "SteelBlue4" "DodgerBlue4" "SlateBlue4" "LightSlateGray"))
    ("Nordic"    . ("SteelBlue" "LightSteelBlue" "SlateGray" "LightSlateGray" "Gray"))
    ("Ocean"     . ("DeepSkyBlue1" "MediumSpringGreen" "Turquoise" "SlateBlue" "CadetBlue"))
    ("Pastel"    . ("SkyBlue" "LightGoldenrod" "PaleGreen" "Salmon" "LightGray"))
    ("Retro"     . ("Magenta3" "Cyan3" "Yellow3" "Green3" "Gray3"))
    ("Royal"     . ("RoyalBlue" "MediumBlue" "Navy" "MidnightBlue" "SlateGray"))
    ("Seaside"   . ("CadetBlue" "LightBlue" "PowderBlue" "PaleTurquoise" "LightSlateGray"))
    ("Sunset"    . ("MediumVioletRed" "DeepPink" "HotPink" "LightPink" "RosyBrown"))
    ("Twilight"  . ("MediumPurple" "SlateBlue" "DarkSlateBlue" "Navy" "DimGray"))
    ("Vibrant"   . ("DodgerBlue1" "Gold1" "Chartreuse1" "OrangeRed1" "Gray50"))
    ("Volcanic"  . ("OrangeRed" "Firebrick" "DarkRed" "IndianRed" "RosyBrown4"))
    ("Wine"      . ("Maroon" "VioletRed" "MediumVioletRed" "PaleVioletRed" "RosyBrown")))
  "Alist of org heading color schemes. Each scheme contains 5 colors:
4 for different heading levels and 1 for done states.")

(defun preview-org-colors ()
  "Preview all color schemes in a temporary buffer."
  (interactive)
  (let ((preview-buffer (get-buffer-create "*Org Color Schemes Preview*")))
    (with-current-buffer preview-buffer
      (erase-buffer)
      (fundamental-mode)
      (dolist (scheme org-heading-colors-schemes)
        (let* ((scheme-name (car scheme))
               (colors (cdr scheme)))

          ;; Insert the theme name
          (let ((start-pos (point)))
            (insert (format "* %s Theme\n" scheme-name))
            (add-text-properties start-pos (point)
                               `(face (:weight bold :height 1.5))))

          ;; Insert each level with its color
          (dotimes (i 4)
            (let ((start-pos (point)))
              (insert (format "%s Level %d Heading (%s)\n"
                            (make-string (1+ i) ?*)
                            (1+ i)
                            (nth i colors)))
              (add-text-properties
               start-pos (point)
               `(face (:foreground ,(nth i colors) :height ,(- 1.4 (* i 0.1)))))))

          ;; Add done state preview
          (let ((start-pos (point)))
            (insert (format "* DONE Example Done Heading (%s)\n" (nth 4 colors)))
            (add-text-properties
             start-pos (point)
             `(face (:foreground ,(nth 4 colors) :height 1.3))))

          (insert "\n"))))

    (display-buffer preview-buffer)))

(defun switch-org-colors (scheme-name)
  "Switch org heading colors to a predefined scheme.
SCHEME-NAME should be one of the defined color schemes."
  (interactive
   (list (completing-read "Choose color scheme: "
                         (mapcar #'car org-heading-colors-schemes))))
  (let* ((colors (cdr (assoc scheme-name org-heading-colors-schemes)))
         (variable-tuple
          (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                ((x-list-fonts "Avenir Next") '(:font "Avenir Next"))
                ((x-list-fonts "Verdana") '(:font "Verdana"))
                ((x-list-fonts "ETBembo") '(:font "ETBembo"))
                ((x-list-fonts "Lucida Grande") '(:font "Lucida Grande"))
                ((x-family-fonts "Sans Serif") '(:family "Sans Serif"))
                (nil (warn "Cannot find a Sans Serif Font. Install Source Sans Pro."))))
         (headline `(:inherit default :weight normal)))

    (custom-theme-set-faces
     'user
     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.8 :foreground ,(nth 0 colors)))))
     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5 :foreground ,(nth 1 colors)))))
     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.4 :foreground ,(nth 2 colors)))))
     `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.3 :foreground ,(nth 3 colors)))))
     `(org-done ((t (,@headline :foreground ,(nth 4 colors))))))

    (message "Switched to %s color scheme" scheme-name)))
#+end_src

** Org Bullet Schemes
#+begin_src emacs-lisp
(defvar rk/org-bullet-schemes
  '(("Geometric" . ("◉" "○" "◈" "◇"))
    ("Natural"   . ("❋" "✿" "❀" "✤"))
    ("Stars"     . ("★" "☆" "✭" "✧"))
    ("Circles"   . ("●" "◐" "◑" "○"))
    ("Math"      . ("➊" "➋" "➌" "➍"))
    ("Arrows"    . ("➤" "➢" "➣" "➼"))
    ("Modern"    . ("◆" "▶" "▸" "▹"))
    ("Celestial" . ("✶" "✸" "✹" "✺"))
    ("Boxes"      . ("█" "▅" "▃" "▁"))
    ("Diamonds"   . ("❖" "❈" "✧" "✦"))
    ("Flowers"    . ("✾" "✽" "✼" "✻"))
    ("Hearts"     . ("❤" "♥" "♡" "❥"))
    ("Snowflakes" . ("❄" "❆" "❅" "❊"))
    ("Chess"      . ("♔" "♕" "♖" "♗"))
    ("Squares"    . ("⬣" "⬡" "⬢" "⬩"))
    ("Weather"    . ("☀" "☁" "☂" "☃"))
    ("Music"      . ("♬" "♫" "♪" "♩"))
    ("Cards"      . ("♠" "♣" "♥" "♦"))
    ("Buddhist"   . ("☸" "☯" "☮" "✴"))
    ("Runes"      . ("ᛃ" "ᛒ" "ᛦ" "ᚻ"))
    ("Tech"       . ("⌘" "⌥" "⇧" "⌤"))
    ("Blocks"     . ("░" "▒" "▓" "█"))
    ("Planets"    . ("☉" "☽" "☿" "♀"))
    ("Zodiac"     . ("♈" "♉" "♊" "♋"))
    ("Ancient"    . ("⚛" "☤" "⚕" "⚚"))
    ("Symbolic"   . ("⚡" "☘" "☔" "☠"))
    ("Checklist"  . ("☑" "☐" "⚀" "⚁")) )
  "Alist of org heading bullet schemes.")

(defun rk/switch-org-bullets (scheme-name)
  "Switch org heading bullets to a predefined scheme."
  (interactive
   (list (completing-read "Choose bullet scheme: "
                          (mapcar #'car rk/org-bullet-schemes))))
  (let ((bullets (cdr (assoc scheme-name rk/org-bullet-schemes))))
    (setq org-superstar-headline-bullets-list bullets)
    (org-superstar-restart)
    (message "Switched to %s bullet scheme" scheme-name)))

(defun rk/preview-org-bullets ()
  "Preview all bullet schemes in a temporary buffer."
  (interactive)
  (with-output-to-temp-buffer "*Org Bullet Schemes Preview*"
    (with-current-buffer "*Org Bullet Schemes Preview*"
      (org-mode)
      (dolist (scheme rk/org-bullet-schemes)
        (insert (format "* %s\n" (car scheme)))
        (let ((bullets (cdr scheme)))
          (dolist (bullet bullets)
            (insert (format "  %s %s\n" bullet bullet))))
        (insert "\n")))))
#+end_src

* Integration Functions

** Elfeed Integration
#+begin_src emacs-lisp
(defun elfeed-save-to-org-roam-dailies ()
  "Save the current elfeed entry to org-roam dailies."
  (interactive)
  (let* ((entry (elfeed-search-selected :single))
         (title (elfeed-entry-title entry))
         (link (elfeed-entry-link entry))
         (content (elfeed-deref (elfeed-entry-content entry)))
         (date (format-time-string "%Y-%m-%d"))
         (org-roam-dailies-dir (expand-file-name "dailies" org-roam-directory))
         (daily-file (expand-file-name (concat date ".org") org-roam-dailies-dir)))
    (unless (file-exists-p daily-file)
      (with-temp-buffer (write-file daily-file)))
    (with-current-buffer (find-file-noselect daily-file)
      (goto-char (point-max))
      (insert (concat "* " title "\n"))
      (insert (concat "[[" link "][" link "]]\n\n"))
      (insert (concat content "\n"))
      (save-buffer))))
#+end_src

* Development and Utility Functions

** Custom Spacemacs Config Helper
#+begin_src emacs-lisp
(defun rk/insert-spacemacs-config-block ()
  "Insert org-babel source block for Spacemacs config."
  (interactive)
  (let* ((targets (rk/get-spacemacs-config-targets))
         (target (completing-read "Choose target or specify new: " targets nil t)))
    (setq rk/last-inserted-config-target target)
    (insert (format "#+begin_src emacs-lisp :noweb-ref %s\n\n" target)
            (format "  ;; insert your code here\n\n")
            "#+end_src\n")))

(defun rk/get-spacemacs-config-targets ()
  "Get list of unique Spacemacs config targets from noweb references in source blocks with matching header."
  (interactive)
  (let ((targets '()))
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "^#\\+begin_src emacs-lisp :noweb-ref \\([^,[:space:]]+\\)[,[:space:]]" nil t)
        (let ((target (match-string 1)))
          (unless (member target targets)
            (push target targets)))))
    targets))
#+end_src

** Project and Org Management Utilities
#+begin_src emacs-lisp
(defun rk/org-create-project-template ()
  "Create a new project with standard structure."
  (interactive)
  (let* ((project-name (read-string "Project name: "))
         (project-file (rk/org-file "projects.org")))
    (with-current-buffer (find-file-noselect project-file)
      (goto-char (point-max))
      (insert (format "\n* PROJECT %s\n" project-name))
      (insert "** Purpose/Outcome\n   \n\n")
      (insert "** Next Actions\n*** TODO \n\n")
      (insert "** Notes\n   \n\n")
      (insert "** Reference Materials\n   \n\n")
      (save-buffer)
      (message "Created project template for %s" project-name))))

(defun rk/org-archive-done-items ()
  "Archive all DONE items in current buffer."
  (interactive)
  (org-map-entries
   (lambda ()
     (when (member (org-get-todo-state) '("DONE" "CANCELLED" "COMPLETED" "ATTENDED" "ANSWERED" "DECIDED"))
       (org-archive-subtree)))
   nil 'file))

(defun rk/org-weekly-report ()
  "Generate a weekly report of completed items."
  (interactive)
  (let* ((week-start (format-time-string "%Y-%m-%d" (time-subtract (current-time) (* 7 24 60 60))))
         (report-buffer (get-buffer-create "*Weekly Report*")))
    (with-current-buffer report-buffer
      (erase-buffer)
      (insert (format "# Weekly Report - Week of %s\n\n" week-start))
      (insert "## Completed Items\n\n")
      ;; This would need more complex logic to parse LOGBOOK entries
      ;; For now, just show the buffer
      (org-mode))
    (display-buffer report-buffer)))
#+end_src

** Advanced Capture Functions
#+begin_src emacs-lisp
(defun rk/org-capture-meeting-notes ()
  "Capture meeting notes with attendees and agenda."
  (interactive)
  (let* ((meeting-topic (read-string "Meeting topic: "))
         (attendees (read-string "Attendees: "))
         (agenda (read-string "Agenda: ")))
    (org-capture-string
     (format "* MEETING %s\n  SCHEDULED: %s\n  Attendees: %s\n  \n** Agenda\n  %s\n  \n** Notes\n  \n** Action Items\n  "
             meeting-topic
             (format-time-string "<%Y-%m-%d %a %H:%M>")
             attendees
             agenda)
     "wm")))

(defun rk/org-capture-decision ()
  "Capture a decision with context and options."
  (interactive)
  (let* ((decision-topic (read-string "Decision topic: "))
         (context (read-string "Context: ")))
    (org-capture-string
     (format "* QUESTION Should we %s?\n\n** Context\n   %s\n\n** Options\n*** Option 1: \n    Pros: \n    Cons: \n\n*** Option 2: \n    Pros: \n    Cons: \n\n** Decision\n   \n\n** Next Actions\n   [ ] "
             decision-topic
             context)
     "i")))
#+end_src

** Claude AI Integration Functions
#+begin_src emacs-lisp
(defun rk/ask-claude-about-gtd-manual ()
  "Ask Claude about the GTD users guide using the CLI with continuing conversation."
  (interactive)
  (let* ((users-guide (rk/org-file "gtd-users-guide.org"))
         (question (read-string "Ask Claude about GTD manual: "))
         (claude-command (format "claude --continue 'I have a question about my GTD users guide. Here is my question: %s. Please refer to the attached GTD users guide file.' '%s'" 
                                question 
                                users-guide)))
    (if (file-exists-p users-guide)
        (progn
          (message "Asking Claude about GTD manual...")
          (let ((output-buffer (get-buffer-create "*Claude GTD Response*")))
            (with-current-buffer output-buffer
              (erase-buffer)
              (insert (format "Question: %s\n\n" question))
              (insert "Claude's Response:\n")
              (insert "=" (make-string 50 ?=) "\n\n")
              (call-process-shell-command claude-command nil t)
              (org-mode)
              (goto-char (point-min)))
            (display-buffer output-buffer)))
      (message "GTD users guide not found at %s" users-guide))))

(defun rk/ask-claude-about-gtd-tutorial ()
  "Ask Claude about the GTD tutorial using the CLI with continuing conversation."
  (interactive)
  (let* ((tutorial (rk/org-file "gtd-tutorial.org"))
         (question (read-string "Ask Claude about GTD tutorial: "))
         (claude-command (format "claude --continue 'I have a question about my GTD tutorial. Here is my question: %s. Please refer to the attached GTD tutorial file.' '%s'" 
                                question 
                                tutorial)))
    (if (file-exists-p tutorial)
        (progn
          (message "Asking Claude about GTD tutorial...")
          (let ((output-buffer (get-buffer-create "*Claude GTD Response*")))
            (with-current-buffer output-buffer
              (erase-buffer)
              (insert (format "Question: %s\n\n" question))
              (insert "Claude's Response:\n")
              (insert "=" (make-string 50 ?=) "\n\n")
              (call-process-shell-command claude-command nil t)
              (org-mode)
              (goto-char (point-min)))
            (display-buffer output-buffer)))
      (message "GTD tutorial not found at %s" tutorial))))

(defun rk/start-claude-gtd-conversation ()
  "Start a new Claude conversation specifically about GTD system."
  (interactive)
  (let* ((users-guide (rk/org-file "gtd-users-guide.org"))
         (tutorial (rk/org-file "gtd-tutorial.org"))
         (initial-prompt "I want to start a conversation about my GTD (Getting Things Done) system. I have two reference files: a tutorial for learning the system and a comprehensive users guide. Please review these files and let me know you're ready to answer questions about my GTD workflow, configuration, troubleshooting, or any other GTD-related topics.")
         (claude-command (format "claude '%s' '%s' '%s'" 
                                initial-prompt
                                users-guide 
                                tutorial)))
    (if (and (file-exists-p users-guide) (file-exists-p tutorial))
        (progn
          (message "Starting Claude GTD conversation...")
          (let ((output-buffer (get-buffer-create "*Claude GTD Conversation*")))
            (with-current-buffer output-buffer
              (erase-buffer)
              (insert "Starting GTD Conversation with Claude\n")
              (insert "=" (make-string 40 ?=) "\n\n")
              (call-process-shell-command claude-command nil t)
              (org-mode)
              (goto-char (point-min)))
            (display-buffer output-buffer)))
      (message "GTD files not found. Need both tutorial and users guide."))))

(defun rk/continue-claude-gtd-conversation ()
  "Continue the existing Claude GTD conversation."
  (interactive)
  (let* ((question (read-string "Continue GTD conversation with Claude: "))
         (claude-command (format "claude --continue '%s'" question)))
    (message "Continuing Claude GTD conversation...")
    (let ((output-buffer (get-buffer-create "*Claude GTD Conversation*")))
      (with-current-buffer output-buffer
        (goto-char (point-max))
        (insert "\n\n" (make-string 40 ?-) "\n")
        (insert (format "You: %s\n\n" question))
        (insert "Claude: ")
        (call-process-shell-command claude-command nil t)
        (org-mode)
        (goto-char (point-max)))
      (display-buffer output-buffer))))

(defun rk/ask-claude-quick-gtd ()
  "Quick one-shot question about GTD without starting a conversation."
  (interactive)
  (let* ((question (read-string "Quick GTD question for Claude: "))
         (users-guide (rk/org-file "gtd-users-guide.org"))
         (claude-command (format "claude -p 'Quick GTD question: %s. Please answer based on the attached comprehensive GTD users guide.' '%s'" 
                                question 
                                users-guide)))
    (if (file-exists-p users-guide)
        (progn
          (message "Getting quick GTD answer from Claude...")
          (let ((output-buffer (get-buffer-create "*Claude Quick GTD*")))
            (with-current-buffer output-buffer
              (erase-buffer)
              (insert (format "Q: %s\n\n" question))
              (call-process-shell-command claude-command nil t)
              (org-mode)
              (goto-char (point-min)))
            (display-buffer output-buffer)))
      (message "GTD users guide not found at %s" users-guide))))
#+end_src

* Configuration and Setup Functions

** System Configuration Loader
#+begin_src emacs-lisp
(defun rk/load-codelahoma-org-config ()
  "Load the codelahoma-org configuration if the file exists."
  (let ((config-file (expand-file-name "~/.spacemacs.d/codelahoma-org.el")))
    (when (file-exists-p config-file)
      (load-file config-file)
      (message "Loaded CodeLahoma org extensions"))))

(defun rk/tangle-and-load-codelahoma-org ()
  "Tangle this file and load the resulting elisp."
  (interactive)
  (let ((org-file (expand-file-name "~/.codelahoma-org.org"))
        (el-file (expand-file-name "~/.spacemacs.d/codelahoma-org.el")))
    (when (file-exists-p org-file)
      ;; Tangle the org file
      (with-current-buffer (find-file-noselect org-file)
        (org-babel-tangle))
      ;; Load the tangled elisp
      (when (file-exists-p el-file)
        (load-file el-file)
        (message "Tangled and loaded CodeLahoma org extensions")))))
#+end_src

* Keybinding Setup

** Custom Keybindings for Extensions
#+begin_src emacs-lisp
(defun rk/setup-codelahoma-org-keybindings ()
  "Set up keybindings for CodeLahoma org extensions."
  ;; Declare extensions prefix
  (spacemacs/declare-prefix "oox" "extensions")
  
  ;; Color and bullet schemes
  (spacemacs/set-leader-keys "ooxc" 'switch-org-colors)
  (spacemacs/set-leader-keys "ooxC" 'preview-org-colors)
  (spacemacs/set-leader-keys "ooxb" 'rk/switch-org-bullets)
  (spacemacs/set-leader-keys "ooxB" 'rk/preview-org-bullets)
  
  ;; Project management
  (spacemacs/set-leader-keys "ooxp" 'rk/org-create-project-template)
  (spacemacs/set-leader-keys "ooxa" 'rk/org-archive-done-items)
  (spacemacs/set-leader-keys "ooxr" 'rk/org-weekly-report)
  
  ;; Advanced capture
  (spacemacs/set-leader-keys "ooxm" 'rk/org-capture-meeting-notes)
  (spacemacs/set-leader-keys "ooxd" 'rk/org-capture-decision)
  
  ;; Claude AI integration
  (spacemacs/declare-prefix "ooxA" "claude")
  (spacemacs/set-leader-keys "ooxAm" 'rk/ask-claude-about-gtd-manual)
  (spacemacs/set-leader-keys "ooxAt" 'rk/ask-claude-about-gtd-tutorial)
  (spacemacs/set-leader-keys "ooxAs" 'rk/start-claude-gtd-conversation)
  (spacemacs/set-leader-keys "ooxAc" 'rk/continue-claude-gtd-conversation)
  (spacemacs/set-leader-keys "ooxAq" 'rk/ask-claude-quick-gtd)
  
  ;; System maintenance
  (spacemacs/set-leader-keys "ooxt" 'rk/tangle-and-load-codelahoma-org))
#+end_src

* Auto-loading Hook

** Initialize Extensions
#+begin_src emacs-lisp
;; Auto-setup when org-mode loads
(with-eval-after-load 'org
  (rk/setup-codelahoma-org-keybindings)
  (rk/setup-gtd-keybindings)
  (rk/setup-dynamic-descriptions)
  (rk/setup-extended-which-key-descriptions)
  (message "CodeLahoma org extensions loaded"))

;; Provide feature
(provide 'codelahoma-org)
#+end_src

---
/CodeLahoma Org Mode Extensions - Modular org-mode enhancements/