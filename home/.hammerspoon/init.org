#+property: header-args:lua :tangle (concat (file-name-sans-extension (buffer-file-name)) ".lua")
#+property: header-args :mkdirp yes :comments no
#+startup: indent

#+begin_src lua :exports none
  -- DO NOT EDIT THIS FILE DIRECTLY
  -- This is a file generated from a literate programing source file located at :TBD:
  -- You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t

  -- NOTE: This file is inspired by and borrows heavily from https://github.com/zzamboni/dot-hammerspoon/blob/master/init.org
#+end_src

#+title: My Hammerspoon config file
#+author: Rod Knowlton
#+email: rod@codelahoma.com

* Table of Contents :TOC_3:noexport:
- [[#general-variables-and-configuration][General Variables and Configuration]]
- [[#spoon-management][Spoon Management]]
- [[#window-and-screen-manipulation][Window and Screen Manipulation]]
- [[#global-key-bindings][Global Key Bindings]]
- [[#show-application-keybindings][Show application keybindings]]
- [[#fast-navigation-to-core-apps][Fast navigation to core apps]]
  - [[#helper-functions][Helper Functions]]
  - [[#home-bindings][Home Bindings]]
  - [[#work-bindings][Work Bindings]]
- [[#hotkey-model-madness][Hotkey Model Madness]]
- [[#caffeinate][Caffeinate]]
- [[#load-local-config][Load Local Config]]
- [[#wrap-up][Wrap Up]]

* General Variables and Configuration

Global log level. Per-spoon log level can be configured in each =Install:andUse= block below.

#+begin_src lua
  hs.logger.defaultLogLevel = "info"
#+end_src

Define my primary modifier combinations,  =hyper= and =magic=

#+begin_src lua
  hyper = {"cmd","alt","ctrl","shift"}
  magic = {"cmd","alt","ctrl"}
#+end_src

Abbreviations for frequently used modules

#+begin_src lua
  application = hs.application
  hotkey = hs.hotkey
  grid = hs.grid
  window = hs.window
  screen = hs.screen
  spotify = hs.spotify
  machine = hs.host.localizedName()
#+end_src

* Spoon Management 

Set up SpoonInstall - this is the only spoon that needs to be manually installed (it is already there if you check out this repository), all the others are installed and configured automatically.

#+begin_src lua
  hs.loadSpoon("SpoonInstall")
#+end_src

I prefer sync notifications, makes them easier to read.

#+begin_src lua
  spoon.SpoonInstall.use_syncinstall = true
#+end_src

This is just a shortcut to make the declarations below look more readable, i.e. =Install:andUse= instead of =spoon.SpoonInstall:andUse=.

#+begin_src lua
  Install=spoon.SpoonInstall
#+end_src

* Window and Screen Manipulation

The [[http://www.hammerspoon.org/Spoons/WindowGrid.html][WindowGrid]] spoon sets up a key binding (=Hyper-g= here) to overlay a grid that allows resizing windows by specifying their opposite corners.

#+begin_src lua
  Install:andUse("WindowGrid",
                  {
                    config = { gridGeometries = { { "8x5", "3840x2160"}, { "6x4" } } },
                    hotkeys = {show_grid = {hyper, "8"}},
                    start = true
                  }
  )

  hs.grid.HINTS = {
    {'a', 's', 'd', 'f', 'f6', 'f7', 'f8', 'f9'},
    {'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'},
    {'1', '2', '3', '4', '5', '6', '7', '8'},
    {'z', 'x', 'c', 'v', 'n', 'm', ',', '.'},
    {'f1', 'f2', 'f3', 'f4', 'j', 'k', 'l', ';'},
  }

#+end_src

* Global Key Bindings

What's playing?

#+begin_src lua
  hotkey.bind(magic, 'space', spotify.displayCurrentTrack)
#+end_src

* Show application keybindings

The KSheet spoon provides for showing the keybindings for the currently active application.

#+begin_src lua
  Install:andUse("KSheet", {
                   hotkeys = {
                     toggle = { hyper, "-" }
                   }
  })
#+end_src
* Fast navigation to core apps 

** Helper Functions
#+begin_src lua
  local function centerOnMainDisplay()
    local bigScreen = screen.find('LG Ultra HD')
    if bigScreen then
      window.focusedWindow():centerOnScreen(bigScreen)
    end
  end

  local function appLauncher(app)
    return function()
      launched = application.launchOrFocus(app) 
      if not launched then
        launched = application.launchOrFocusByBundleID(app)
      end

      wonkyAppsThatFocusButReturnFalse = {'iTerm'}
      for _, v in ipairs(wonkyAppsThatFocusButReturnFalse) do
         if v == app then
            return
         end
      end

      if not launched then
            hs.alert(app .. " not found")
      end
    end
  end

  local function pasteLauncher()
    return function()
      hs.eventtap.keyStroke({"cmd", "shift"}, "v")
    end
  end
#+end_src

#+RESULTS:

** Home Bindings


#+begin_src lua
if machine == "codelahoma-mbp" then
  hotkey.bind(hyper, "b", appLauncher('com.brave.Browser'))
  hotkey.bind(hyper, "c", hs.toggleConsole)
  hotkey.bind(hyper, "d", appLauncher('Dash'))
  hotkey.bind(hyper, "e", appLauncher('Finder'))
  hotkey.bind(hyper, "i", appLauncher('iTerm'))
  hotkey.bind(hyper, "j", appLauncher('Emacs.app'))
  hotkey.bind(hyper, "k", appLauncher('Google Chrome'))
  hotkey.bind(hyper, "m", appLauncher('Spark'))
  hotkey.bind(hyper, "o", appLauncher('Slack'))
  hotkey.bind(hyper, "r", hs.reload)
  hotkey.bind(hyper, "v", pasteLauncher())
  hotkey.bind(hyper, "0", centerOnMainDisplay)
  hotkey.bind(hyper, "1", appLauncher('1Password 7'))
  hotkey.bind(hyper, ";", appLauncher('Spotify'))
end
#+end_src

** Work Bindings

#+begin_src lua
  if machine == "codelahoma" then
    hotkey.bind(hyper, "b", appLauncher('Books'))
    hotkey.bind(hyper, "c", hs.toggleConsole)
    hotkey.bind(hyper, "d", appLauncher('Dash'))
    hotkey.bind(hyper, "e", appLauncher('Finder'))
    hotkey.bind(hyper, "f", appLauncher('Firefox'))
    hotkey.bind(hyper, "h", appLauncher('VMware Horizon Client'))
    hotkey.bind(hyper, "i", appLauncher('iTerm'))
    hotkey.bind(hyper, "j", appLauncher('/Applications/Emacs.app'))
    hotkey.bind(hyper, "k", appLauncher('Google Chrome'))
    hotkey.bind(hyper, "m", appLauncher('Microsoft Edge'))
    hotkey.bind(hyper, "o", appLauncher('Slack'))
    hotkey.bind(hyper, "p", appLauncher('Pycharm'))
    hotkey.bind(hyper, "q", appLauncher('qutebrowser'))
    hotkey.bind(hyper, "r", hs.reload)
    hotkey.bind(hyper, "s", appLauncher('Skype for Business'))
    hotkey.bind(hyper, "v", pasteLauncher())
    hotkey.bind(hyper, "y", appLauncher('Summit Jira'))
    hotkey.bind(hyper, "0", centerOnMainDisplay)
    hotkey.bind(hyper, "1", appLauncher('1Password 7'))
    hotkey.bind(hyper, ";", appLauncher('Spotify'))
  end
#+end_src

* Hotkey Model Madness

#+begin_src lua
  modal = hs.hotkey.modal.new(hyper, "n", " Going Modal! ")

  -- in this example, Ctrl+Shift+h triggers this keybinding mode, which will allow us to use the ones defined below. A nice touch for usability: This also offers to show a message.

  -- I recommend having this one at all times: Bind the escape key to exit keybinding mode:
  modal:bind("", "escape", " not this time...", nil, function() modal:exit() end, nil)

  -- An example binding I find useful: Type today's date in ISO format.
  -- modal:bind("", "d", "today", nil, function() hs.eventtap.keyStrokes(os.date("%F")) modal:exit() end, nil)
  modal:bind("", "a", "activity", nil, function() application.launchOrFocus("Activity Monitor") modal:exit() end, nil)
  modal:bind("", "d", "dash", nil, function() application.launchOrFocus("Dash") modal:exit() end, nil)
  modal:bind("", "e", "excel", nil, function() application.launchOrFocus("Microsoft Excel") modal:exit() end, nil)
  modal:bind("", "j", "JIRA", nil, function() application.launchOrFocus("Summit Jira") modal:exit() end, nil)
  modal:bind("", "p", "postman", nil, function() application.launchOrFocus("Postman") modal:exit() end, nil)
  modal:bind("", "s", "spark", nil, function() application.launchOrFocus("Spark") modal:exit() end, nil)
  modal:bind("", "v", "paste", nil, function() hs.eventtap.keyStroke({"cmd", "shift"}, "v") modal:exit() end, nil)
#+end_src

* Caffeinate

#+begin_src lua
  caffeine = hs.menubar.new()
  hs.caffeinate.set("system", true, false)

  local function setCaffeineDisplay(state)
    if state then
      caffeine:setIcon("caffeine-on.pdf")
    else
      caffeine:setIcon("caffeine-off.pdf")
    end
  end

  local function caffeineClicked()
    setCaffeineDisplay(hs.caffeinate.toggle("system"))
  end

  if caffeine then
    caffeine:setClickCallback(caffeineClicked)
    setCaffeineDisplay(hs.caffeinate.get("system"))
  end
#+end_src

* Load Local Config

#+begin_src lua
  local localfile = hs.configdir .. "/init-local.lua"

  if hs.fs.attributes(localfile) then
    dofile(localfile)
  end
#+end_src

* Wrap Up

Make sure Hammerspoon cli is installed

#+begin_src lua
  hs.ipc.cliInstall()
#+end_src

Heads up that we're done

#+begin_src lua
  hs.alert.show("Config Loaded")
#+end_src
