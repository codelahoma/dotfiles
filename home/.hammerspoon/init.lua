-- DO NOT EDIT THIS FILE DIRECTLY
-- This is a file generated from a literate programing source file located at :TBD:
-- You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t

-- NOTE: This file is inspired by and borrows heavily from https://github.com/zzamboni/dot-hammerspoon/blob/master/init.org

hs.logger.defaultLogLevel = "info"

hyper = {"cmd","alt","ctrl","shift"}
magic = {"cmd","alt","ctrl"}

application = hs.application
hotkey = hs.hotkey
grid = hs.grid
window = hs.window
screen = hs.screen
spotify = hs.spotify
machine = hs.host.localizedName()

hs.loadSpoon("SpoonInstall")

spoon.SpoonInstall.use_syncinstall = true

Install=spoon.SpoonInstall

Install:andUse("WindowGrid",
                {
                  config = { gridGeometries = { { "8x5", "3840x2160"}, { "6x4" } } },
                  hotkeys = {show_grid = {hyper, "8"}},
                  start = true
                }
)

hs.grid.HINTS = {
  {'a', 's', 'd', 'f', 'f6', 'f7', 'f8', 'f9'},
  {'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'},
  {'1', '2', '3', '4', '5', '6', '7', '8'},
  {'z', 'x', 'c', 'v', 'n', 'm', ',', '.'},
  {'f1', 'f2', 'f3', 'f4', 'j', 'k', 'l', ';'},
}

hotkey.bind(magic, 'space', spotify.displayCurrentTrack)

Install:andUse("KSheet", {
                 hotkeys = {
                   toggle = { hyper, "-" }
                 }
})

local function centerOnMainDisplay()
  local bigScreen = screen.find('LG Ultra HD')
  if bigScreen then
    window.focusedWindow():centerOnScreen(bigScreen)
  end
end

local function appLauncher(app)
  return function()
    launched = application.launchOrFocus(app) 
    if not launched then
      launched = application.launchOrFocusByBundleID(app)
    end
    if not launched then
          hs.alert(app .. " not found")
    end
  end
end

local function pasteLauncher()
  return function()
    hs.eventtap.keyStroke({"cmd", "shift"}, "v")
  end
end

if machine == "codelahoma-mbp" then
  hotkey.bind(hyper, "b", appLauncher('com.brave.Browser'))
  hotkey.bind(hyper, "c", hs.toggleConsole)
  hotkey.bind(hyper, "d", appLauncher('Dash'))
  hotkey.bind(hyper, "e", appLauncher('Finder'))
  hotkey.bind(hyper, "i", appLauncher('iTerm'))
  hotkey.bind(hyper, "j", appLauncher('Emacs.app'))
  hotkey.bind(hyper, "k", appLauncher('Google Chrome'))
  hotkey.bind(hyper, "m", appLauncher('Spark'))
  hotkey.bind(hyper, "o", appLauncher('Slack'))
  hotkey.bind(hyper, "r", hs.reload)
  hotkey.bind(hyper, "v", pasteLauncher())
  hotkey.bind(hyper, "0", centerOnMainDisplay)
  hotkey.bind(hyper, "1", appLauncher('1Password 7'))
  hotkey.bind(hyper, ";", appLauncher('Spotify'))
end

if machine == "codelahoma" then
  hotkey.bind(hyper, "b", appLauncher('Books'))
  hotkey.bind(hyper, "c", hs.toggleConsole)
  hotkey.bind(hyper, "d", appLauncher('Dash'))
  hotkey.bind(hyper, "e", appLauncher('Finder'))
  hotkey.bind(hyper, "f", appLauncher('Firefox'))
  hotkey.bind(hyper, "h", appLauncher('VMware Horizon Client'))
  hotkey.bind(hyper, "i", appLauncher('iTerm'))
  hotkey.bind(hyper, "j", appLauncher('/Applications/Emacs.app'))
  hotkey.bind(hyper, "k", appLauncher('Google Chrome'))
  hotkey.bind(hyper, "m", appLauncher('Microsoft Edge'))
  hotkey.bind(hyper, "o", appLauncher('Slack'))
  hotkey.bind(hyper, "p", appLauncher('Pycharm'))
  hotkey.bind(hyper, "q", appLauncher('qutebrowser'))
  hotkey.bind(hyper, "r", hs.reload)
  hotkey.bind(hyper, "s", appLauncher('Skype for Business'))
  hotkey.bind(hyper, "v", pasteLauncher())
  hotkey.bind(hyper, "y", appLauncher('Summit Jira'))
  hotkey.bind(hyper, "0", centerOnMainDisplay)
  hotkey.bind(hyper, "1", appLauncher('1Password 7'))
  hotkey.bind(hyper, ";", appLauncher('Spotify'))
end

modal = hs.hotkey.modal.new(hyper, "n", " Going Modal! ")

-- in this example, Ctrl+Shift+h triggers this keybinding mode, which will allow us to use the ones defined below. A nice touch for usability: This also offers to show a message.

-- I recommend having this one at all times: Bind the escape key to exit keybinding mode:
modal:bind("", "escape", " not this time...", nil, function() modal:exit() end, nil)

-- An example binding I find useful: Type today's date in ISO format.
-- modal:bind("", "d", "today", nil, function() hs.eventtap.keyStrokes(os.date("%F")) modal:exit() end, nil)
modal:bind("", "a", "activity", nil, function() application.launchOrFocus("Activity Monitor") modal:exit() end, nil)
modal:bind("", "d", "dash", nil, function() application.launchOrFocus("Dash") modal:exit() end, nil)
modal:bind("", "e", "excel", nil, function() application.launchOrFocus("Microsoft Excel") modal:exit() end, nil)
modal:bind("", "j", "JIRA", nil, function() application.launchOrFocus("Summit Jira") modal:exit() end, nil)
modal:bind("", "p", "postman", nil, function() application.launchOrFocus("Postman") modal:exit() end, nil)
modal:bind("", "s", "spark", nil, function() application.launchOrFocus("Spark") modal:exit() end, nil)
modal:bind("", "v", "paste", nil, function() hs.eventtap.keyStroke({"cmd", "shift"}, "v") modal:exit() end, nil)

caffeine = hs.menubar.new()
hs.caffeinate.set("system", true, false)

local function setCaffeineDisplay(state)
  if state then
    caffeine:setIcon("caffeine-on.pdf")
  else
    caffeine:setIcon("caffeine-off.pdf")
  end
end

local function caffeineClicked()
  setCaffeineDisplay(hs.caffeinate.toggle("system"))
end

if caffeine then
  caffeine:setClickCallback(caffeineClicked)
  setCaffeineDisplay(hs.caffeinate.get("system"))
end

local localfile = hs.configdir .. "/init-local.lua"

if hs.fs.attributes(localfile) then
  dofile(localfile)
end

hs.ipc.cliInstall()

hs.alert.show("Config Loaded")
