-- DO NOT EDIT THIS FILE DIRECTLY
-- This is a file generated from a literate programing source file located at :TBD:
-- You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t

-- NOTE: This file is inspired by and borrows heavily from https://github.com/zzamboni/dot-hammerspoon/blob/master/init.org

hs.logger.defaultLogLevel = "info"

hyper = {"cmd","alt","ctrl","shift"}
magic = {"cmd","alt","ctrl"}

application = hs.application
hotkey = hs.hotkey
grid = hs.grid
window = hs.window
screen = hs.screen
spotify = hs.spotify
machine = hs.host.localizedName()

hs.loadSpoon("SpoonInstall")

spoon.SpoonInstall.repos.rkspoons = {
  url = "https://github.com/codelahoma/MenuHammer",
  desc = "codelahoma's MenuHammer repo"
}

spoon.SpoonInstall.use_syncinstall = true

Install=spoon.SpoonInstall

menuHammer = hs.loadSpoon("MenuHammer")
menuHammer:enter()

Install:andUse("WindowGrid",
                {
                  config = { gridGeometries = { { "8x5", "3840x2160"}, { "6x4" } } },
                  hotkeys = {show_grid = {hyper, "8"}},
                  start = true
                }
)

hs.grid.HINTS = {
 {'a', 's', 'd', 'f', '6', '7', '8', '0'}, 
 {'w', 'e', 'r', 't', 'z', 'x', '=', '9'}, 
 {'b', 'g', 'q', 'v', 'y', 'u', 'i', 'o'}, 
 {'1', 'p', '/', 'c', 'n', 'm', '.', '-'}, 
 {'5', '2', '3', '4', 'j', 'k', 'l', ';'}, 
}

-- DefaultBrowser = "com.brave.Browser.dev"
DefaultBrowser = "com.google.Chrome"
JiraApp = "org.epichrome.eng.SummitJIRA"
-- WikiApp = "org.epichrome.eng.Wiki"
-- CollabApp = DefaultBrowser
-- SmcaApp = DefaultBrowser
-- OpsGenieApp = DefaultBrowser
AWSConsoleApp = "org.epichrome.eng.AWSConsole"

Install:andUse("URLDispatcher",
               {
                 config = {
                   url_patterns = {
                     { "https?://summitesp.atlassian.net",          JiraApp },
                     -- { "https?://issue.swisscom.com",         JiraApp },
                     -- { "https?://jira.swisscom.com",          JiraApp },
                     -- { "https?://wiki.swisscom.com",          WikiApp },
                     -- { "https?://collaboration.swisscom.com", CollabApp },
                     -- { "https?://smca.swisscom.com",          SmcaApp },
                     -- { "https?://app.opsgenie.com",           OpsGenieApp },
                     -- { "https?://app.eu.opsgenie.com",        OpsGenieApp },
                     -- { "msteams:",                            "com.microsoft.teams" }
                   },
                   url_redir_decoders = {
                   --   { "Office 365 safelinks check",
                   --     "https://eur03.safelinks.protection.outlook.com/(.*)\\?url=(.-)&.*",
                   --     "%2" },
                   --   { "MS Teams URLs",
                   --     "(https://teams.microsoft.com.*)", "msteams:%1", true }
                   },
                   default_handler = DefaultBrowser
                 },
                 start = true,
                 --                   loglevel = 'debug'
               }
)

hotkey.bind(magic, 'space', spotify.displayCurrentTrack)

Install:andUse("KSheet", {
                 hotkeys = {
                   toggle = { hyper, "-" }
                 }
})

local function centerOnMainDisplay()
  local bigScreen = screen.find('LG Ultra HD')
  if bigScreen then
    window.focusedWindow():centerOnScreen(bigScreen)
  end
end

local function appLauncher(app)
  return function()
    launched = application.launchOrFocus(app) 
    if not launched then
      launched = application.launchOrFocusByBundleID(app)
    end

    wonkyAppsThatFocusButReturnFalse = {'iTerm'}
    for _, v in ipairs(wonkyAppsThatFocusButReturnFalse) do
       if v == app then
          return
       end
    end

    if not launched then
          hs.alert(app .. " not found")
    end
  end
end

local function pasteLauncher()
  return function()
    hs.eventtap.keyStroke({"cmd", "shift"}, "v")
  end
end

if machine == "codelahoma-mbp" then
  hotkey.bind(hyper, "b", appLauncher('com.brave.Browser'))
  hotkey.bind(hyper, "c", hs.toggleConsole)
  hotkey.bind(hyper, "d", appLauncher('Dash'))
  hotkey.bind(hyper, "e", appLauncher('Finder'))
  hotkey.bind(hyper, "i", appLauncher('iTerm'))
  hotkey.bind(hyper, "j", appLauncher('Emacs.app'))
  hotkey.bind(hyper, "k", appLauncher('Google Chrome'))
  hotkey.bind(hyper, "o", appLauncher('Slack'))
  hotkey.bind(hyper, "r", hs.reload)
  hotkey.bind(hyper, "s", appLauncher('Spark'))
  hotkey.bind(hyper, "v", pasteLauncher())
  hotkey.bind(hyper, "0", centerOnMainDisplay)
  hotkey.bind(hyper, "1", appLauncher('1Password 7'))
  hotkey.bind(hyper, "u", appLauncher('Spotify'))
end

if machine == "codelahoma" then
  hotkey.bind(hyper, "b", appLauncher('Books'))
  hotkey.bind(hyper, "c", hs.toggleConsole)
  hotkey.bind(hyper, "d", appLauncher('Dash'))
  hotkey.bind(hyper, "e", appLauncher('Finder'))
  hotkey.bind(hyper, "f", appLauncher('Firefox'))
  hotkey.bind(hyper, "h", appLauncher('VMware Horizon Client'))
  hotkey.bind(hyper, "i", appLauncher('iTerm'))
  hotkey.bind(hyper, "j", appLauncher('/Applications/Emacs.app'))
  hotkey.bind(hyper, "k", appLauncher('Google Chrome'))
  hotkey.bind(hyper, "m", appLauncher('Microsoft Edge'))
  hotkey.bind(hyper, "o", appLauncher('Slack'))
  hotkey.bind(hyper, "p", appLauncher('Pycharm'))
  hotkey.bind(hyper, "q", appLauncher('qutebrowser'))
  hotkey.bind(hyper, "r", hs.reload)
  hotkey.bind(hyper, "s", appLauncher('Skype for Business'))
  hotkey.bind(hyper, "v", pasteLauncher())
  hotkey.bind(hyper, "y", appLauncher('Summit Jira'))
  hotkey.bind(hyper, "0", centerOnMainDisplay)
  hotkey.bind(hyper, "1", appLauncher('1Password 7'))
  hotkey.bind(hyper, ";", appLauncher('Spotify'))
end

menuModal = hs.hotkey.modal.new(hyper, "n")
menuModal.alertUID = ""
menuModal.alertText = [[
Modal Menu
----------
a - Activity Monitor
b - Brave Browser Dev
c - AWS Console
d - Dash
e - Excel
j - JIRA
p - Postman
s - Spark
v - Paste

ESC - exit
]]


function menuModal:entered()
   self.alertUID = hs.alert(self.alertText, "forever")
end

function menuModal:exited()
   hs.alert.closeSpecific(self.alertUID)
end

-- in this example, Ctrl+Shift+h triggers this keybinding mode, which will allow us to use the ones defined below. A nice touch for usability: This also offers to show a message.

-- I recommend having this one at all times: Bind the escape key to exit keybinding mode:
menuModal:bind("", "escape", " not this time...", nil, function() menuModal:exit() end, nil)

-- An example binding I find useful: Type today's date in ISO format.
-- menuModal:bind("", "d", "today", nil, function() hs.eventtap.keyStrokes(os.date("%F")) menuModal:exit() end, nil)
menuModal:bind("", "a", "activity", nil, function() application.launchOrFocus("Activity Monitor") menuModal:exit() end, nil)
menuModal:bind("", "b", "Brave Browser Dev", nil, function() application.launchOrFocus("Brave Browser Dev") menuModal:exit() end, nil)
menuModal:bind("", "c", "AWS Console", nil, function() application.launchOrFocus("AWS Console") menuModal:exit() end, nil)
menuModal:bind("", "d", "dash", nil, function() application.launchOrFocus("Dash") menuModal:exit() end, nil)
menuModal:bind("", "e", "excel", nil, function() application.launchOrFocus("Microsoft Excel") menuModal:exit() end, nil)
menuModal:bind("", "j", "JIRA", nil, function() application.launchOrFocus("Summit Jira") menuModal:exit() end, nil)
menuModal:bind("", "p", "postman", nil, function() application.launchOrFocus("Postman") menuModal:exit() end, nil)
menuModal:bind("", "s", "spark", nil, function() application.launchOrFocus("Spark") menuModal:exit() end, nil)
menuModal:bind("", "v", "paste", nil, function() hs.eventtap.keyStroke({"cmd", "shift"}, "v") menuModal:exit() end, nil)

caffeine = hs.menubar.new()
hs.caffeinate.set("system", true, false)

local function setCaffeineDisplay(state)
  if state then
    caffeine:setIcon("caffeine-on.pdf")
  else
    caffeine:setIcon("caffeine-off.pdf")
  end
end

local function caffeineClicked()
  setCaffeineDisplay(hs.caffeinate.toggle("system"))
end

if caffeine then
  caffeine:setClickCallback(caffeineClicked)
  setCaffeineDisplay(hs.caffeinate.get("system"))
end

local localfile = hs.configdir .. "/init-local.lua"

if hs.fs.attributes(localfile) then
  dofile(localfile)
end

hs.ipc.cliInstall()

hs.alert.show("Config Loaded")
