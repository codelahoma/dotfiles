-- DO NOT EDIT THIS FILE DIRECTLY
-- This is a file generated from a literate programing source file located at :TBD:
-- You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t

-- NOTE: This file is inspired by and borrows heavily from https://github.com/zzamboni/dot-hammerspoon/blob/master/init.org

hs.logger.defaultLogLevel = "info"

hyper = {"alt","cmd","ctrl","shift"}
magic = {"alt","cmd","ctrl"}

application = hs.application
hotkey = hs.hotkey
grid = hs.grid
window = hs.window
screen = hs.screen
spotify = hs.spotify
machine = hs.host.localizedName()

work_machines = {["codelahoma"] = true, ["codelahoma-kw"] = true, ["codelahoma-kw-m1"] = true, ["codelahoma-atlasup"] = true }
home_machines = {["m1-mini"] = true}

hs.loadSpoon("SpoonInstall")

spoon.SpoonInstall.repos.rkspoons = {
  url = "https://github.com/codelahoma/MenuHammer",
  desc = "codelahoma's MenuHammer repo"
}

spoon.SpoonInstall.use_syncinstall = true

Install=spoon.SpoonInstall

menuHammer = hs.loadSpoon("MenuHammer")
menuHammer:enter()

Install:andUse("WindowGrid",
                {
                  config = { gridGeometries = { { "8x5", "3840x2160"}, { "6x4" } } },
                  start = true
                }
)

hs.grid.HINTS = {
 {'a', 's', 'd', 'f', '6', '7', '8', '0'}, 
 {'w', 'e', 'r', 't', 'z', 'x', '=', '9'}, 
 {'b', 'g', 'q', 'v', 'y', 'u', 'i', 'o'}, 
 {'1', 'p', '/', 'c', 'n', 'm', '.', '-'}, 
 {'5', '2', '3', '4', 'j', 'k', 'l', ';'}, 
}

DefaultBrowser = "com.google.Chrome"
Spotify = "com.spotify.client"
Notion = "notion.id"

if  work_machines[machine] ~= nil  then
  Install:andUse("URLDispatcher",
                {
                  config = {
                    url_patterns = {
                      { "https?://open.spotify.com", Spotify},
                      { "https?://www.notion.so", Notion},
                    },
                    url_redir_decoders = {
                    --   { "Office 365 safelinks check",
                    --     "https://eur03.safelinks.protection.outlook.com/(.*)\\?url=(.-)&.*",
                    --     "%2" },
                    --   { "MS Teams URLs",
                    --     "(https://teams.microsoft.com.*)", "msteams:%1", true }
                    },
                    default_handler = DefaultBrowser
                  },
                  start = true,
                  --                   loglevel = 'debug'
                }
  )
end

if home_machines[machine] ~= nil then
  Install:andUse("URLDispatcher",
                {
                  config = {
                    url_patterns = {
                    },
                    url_redir_decoders = {
                    },
                    default_handler = DefaultBrowser
                  },
                  start = true,
                  --                   loglevel = 'debug'
                }
  )

end

hotkey.bind(magic, 'space', spotify.displayCurrentTrack)

Install:andUse("KSheet", {
                 hotkeys = {
                   toggle = { hyper, "-" }
                 }
})

_centeredWindowsFormerPositions = {}

local function centerOnMainDisplay()
   local win = window.focusedWindow()
   local formerPosition = _centeredWindowsFormerPositions[win:id()]
   local bigScreen = screen.find('LG HDR 4K')

   hs.console.printStyledtext(hs.inspect(formerPosition))

   if formerPosition then
      win:move(formerPosition)
      _centeredWindowsFormerPositions[win:id()] = nil
   else 
      _centeredWindowsFormerPositions[win:id()] = win:frame()
      win:centerOnScreen()
      if bigScreen then
         win:centerOnScreen(bigScreen)
      else
         win:centerOnScreen()
      end
   end
end

local function appLauncher(app)
  return function()
    launched = application.launchOrFocus(app) 
    if not launched then
      launched = application.launchOrFocusByBundleID(app)
    end

    wonkyAppsThatFocusButReturnFalse = {'Teams', 'iTerm', '/Applications/Emacs.app'}
    for _, v in ipairs(wonkyAppsThatFocusButReturnFalse) do
       if v == app then
          return
       end
    end

    if not launched then
          hs.alert(app .. " not found")
    end
  end
end

local function pasteLauncher()
   return function()
      hs.eventtap.keyStroke({"ctrl", "alt", "cmd"}, "p")
   end
end

if work_machines[machine] ~= nil then
  hotkey.bind(hyper, "a", appLauncher('Arduino IDE'))
  hotkey.bind(hyper, "b", appLauncher('Bitbucket'))
  hotkey.bind(hyper, "c", hs.toggleConsole)
  hotkey.bind(hyper, "d", appLauncher('Dash'))
  hotkey.bind(hyper, "e", appLauncher('Finder'))
  hotkey.bind(hyper, "f", appLauncher('MailMate'))
  hotkey.bind(hyper, "h", hs.toggleConsole)
  hotkey.bind(hyper, "j", appLauncher('iTerm'))
  hotkey.bind(hyper, "k", appLauncher('Google Chrome'))
  hotkey.bind(hyper, "l", appLauncher('Google Calendar'))
  hotkey.bind(hyper, "m", appLauncher('GMail'))
  hotkey.bind(hyper, "n", appLauncher('Notion'))
  hotkey.bind(hyper, "o", appLauncher('Slack'))
  hotkey.bind(hyper, "p", appLauncher('Postman'))
  if machine == "codelahoma-atlasup" then
    hotkey.bind(hyper, "q", appLauncher('1Password'))
  else
    hotkey.bind(hyper, "q", appLauncher('1Password 7'))
  end
  hotkey.bind(hyper, "r", hs.reload)
  hotkey.bind(hyper, "s", hs.grid.show)
  hotkey.bind(hyper, "v", pasteLauncher())
  hotkey.bind(hyper, "y", appLauncher('Jira'))
  hotkey.bind(hyper, "z", centerOnMainDisplay)
  hotkey.bind(hyper, ";", appLauncher('Spotify'))
  hotkey.bind(hyper, "0", centerOnMainDisplay)
else
  hotkey.bind(hyper, "a", appLauncher('Arduino IDE'))
  hotkey.bind(hyper, "c", hs.toggleConsole)
  hotkey.bind(hyper, "d", appLauncher('Dash'))
  hotkey.bind(hyper, "e", appLauncher('Finder'))
  hotkey.bind(hyper, "i", appLauncher('iTerm'))
  hotkey.bind(hyper, "j", appLauncher('iTerm'))
  hotkey.bind(hyper, "k", appLauncher('Google Chrome'))
  hotkey.bind(hyper, "m", appLauncher('MailMate'))
  hotkey.bind(hyper, "o", appLauncher('Slack'))
  hotkey.bind(hyper, "p", appLauncher('Preview'))
  hotkey.bind(hyper, "r", hs.reload)
  hotkey.bind(hyper, "v", pasteLauncher())
  hotkey.bind(hyper, "0", centerOnMainDisplay)
  hotkey.bind(hyper, "q", appLauncher('1Password 7'))
  hotkey.bind(hyper, ";", appLauncher('Spotify'))
end

-- menuModal = hs.hotkey.modal.new(hyper, "n")
-- menuModal.alertUID = ""
-- menuModal.alertText = [[
-- Modal Menu
-- ----------
-- a - Activity Monitor
-- b - Brave Browser Dev
-- c - Google Calendar
-- d - Dash
-- m - MailMate
-- n - Notion
-- p - Postman
-- s - Stickies
-- v - Paste

-- ESC - exit
-- ]]


-- function menuModal:entered()
--    self.alertUID = hs.alert(self.alertText, "forever")
-- end

-- function menuModal:exited()
--    hs.alert.closeSpecific(self.alertUID)
-- end

-- -- in this example, Ctrl+Shift+h triggers this keybinding mode, which will allow us to use the ones defined below. A nice touch for usability: This also offers to show a message.

-- -- I recommend having this one at all times: Bind the escape key to exit keybinding mode:
-- menuModal:bind("", "escape", " not this time...", nil, function() menuModal:exit() end, nil)

-- -- An example binding I find useful: Type today's date in ISO format.
-- -- menuModal:bind("", "d", "today", nil, function() hs.eventtap.keyStrokes(os.date("%F")) menuModal:exit() end, nil)
-- menuModal:bind("", "a", "activity", nil, function() application.launchOrFocus("Activity Monitor") menuModal:exit() end, nil)
-- menuModal:bind("", "b", "Brave Browser Dev", nil, function() application.launchOrFocus("Brave Browser Dev") menuModal:exit() end, nil)
-- menuModal:bind("", "c", "Google Calendar", nil, function() application.launchOrFocusByBundleID("com.webcatalog.juli.google-calendar") menuModal:exit() end, nil)
-- menuModal:bind("", "d", "dash", nil, function() application.launchOrFocus("Dash") menuModal:exit() end, nil)
-- menuModal:bind("", "m", "MailMate", nil, function() application.launchOrFocus("MailMate") menuModal:exit() end, nil)
-- menuModal:bind("", "n", "Notion", nil, function() application.launchOrFocus("Notion") menuModal:exit() end, nil)
-- menuModal:bind("", "p", "postman", nil, function() application.launchOrFocus("Postman") menuModal:exit() end, nil)
-- menuModal:bind("", "s", "stickies", nil, function() application.launchOrFocus("Stickies") menuModal:exit() end, nil)
-- menuModal:bind("", "v", "paste", nil, function() hs.eventtap.keyStroke({"cmd", "shift"}, "v") menuModal:exit() end, nil)

caffeine = hs.menubar.new()
hs.caffeinate.set("system", true, false)

local function setCaffeineDisplay(state)
  if state then
    caffeine:setIcon("caffeine-on.pdf")
  else
    caffeine:setIcon("caffeine-off.pdf")
  end
end

local function caffeineClicked()
  setCaffeineDisplay(hs.caffeinate.toggle("system"))
end

if caffeine then
  caffeine:setClickCallback(caffeineClicked)
  setCaffeineDisplay(hs.caffeinate.get("system"))
end

local localfile = hs.configdir .. "/init-local.lua"

if hs.fs.attributes(localfile) then
  dofile(localfile)
end

hs.ipc.cliInstall("/opt/homebrew")

hs.alert.show("Config Loaded")
