--- DO NOT EDIT THIS FILE DIRECTLY
--- This is a file generated from a literate programing source file located at :TBD:
--- You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t

--- Local Variables
-- Main Menu
local mainMenu = "Main Menu"
local helpMenu = "Help Menu"
local applicationMenu = "Application Menu"
local utilitiesMenu = "Utilities Menu"
local browserMenu = "Browser Menu"
local documentsMenu = "Documents Menu"
local finderMenu = "Finder Menu"
local hammerspoonMenu = "Hammerspoon Menu"
local layoutMenu = "Layout Menu"
local lo = {}

lo.mainScreen = hs.screen{x=0, y=0}
lo.nw60 = hs.geometry.new(0, 0, 0.25, 0.6)
lo.sw40 = hs.geometry.new(0, 0.6, 0.25, 0.4)
lo.mid50 = hs.geometry.new(0.25, 0, 0.5, 1)
local mediaMenu = "Media Menu"
local resolutionMenu = "Resolution Menu"
local systemMenu = "System Menu"
local textMenu = "Text Menu"
local toggleMenu = "Toggle Menu"
action = cons.act
entry_type = cons.cat
local logger = hs.logger.new('menuHammer')

--- Preferences
menuShowInFullscreen = true
showMenuBarItem = true
-- The number of seconds that a hotkey alert will stay on screen.
-- 0 = alerts are disabled.
hs.hotkey.alertDuration = 0

-- Show no titles for Hammerspoon windows.
hs.hints.showTitleThresh = 0

-- Disable animations
hs.window.animationDuration = 0
-- The number of columns to display in the menus.  Setting this too high or too low will
-- probably have odd results.
menuNumberOfColumns = 5

-- The minimum number of rows to show in menus
menuMinNumberOfRows = 3

-- The height of menu rows in pixels
menuRowHeight = 20

-- The padding to apply to each side of the menu
menuOuterPadding = 50
menuItemColors = {
    -- The default colors to use.
    default = {
        background = "#000000",
        text = "#aaaaaa"
    },
    -- The colors to use for the Exit menu item
    exit = {
        background = "#000000",
        text = "#C1666B"
    },
    -- The colors to use for the Back menu items
    back = {
        background = "#000000",
        text = "#E76F51"
    },
    -- The colors to use for menu menu items
    submenu = {
        background = "#000000",
        text = "#9A879D"
    },
    -- The colors to use for navigation menu items
    navigation = {
        background = "#000000",
        text = "#4281A4"
    },
    -- The colors to use for empty menu items
    empty = {
        background = "#000000",
        text = "#aaaaaa"
    },
    -- The colors to use for action menu items
    action = {
        background = "#000000",
        text = "#7A3B69"
    },
    menuBarActive = {
        background = "#ff0000",
        text = "#000000"
    },
    menuBarIdle = {
        background = "#00ff00",
        text = "#000000"
    },
    display = {
        background = "#000000",
        text = "#48A9A6"
    }
}

-- The font to apply to menu items.
menuItemFont = "Courier-Bold"

-- The font size to apply to menu items.
menuItemFontSize = 16

-- The text alignment to apply to menu items.
menuItemTextAlign = "left"

-- Key bindings

-- The hotkey that will enable/disable MenuHammer
menuHammerToggleKey = {{ "alt", "cmd", "ctrl" }, "Q"}

-- Menu Prefixes
menuItemPrefix = {
  action = '↩',
  submenu = '→',
  back = '←',
  exit = 'x',
  navigation = '↩',
  -- navigation = '⎋',
  empty = '',
  display = '',
}

-- Menu item separator
menuKeyItemSeparator = ": "


preferredFonts = {
  "Monoid Nerd Font",
  "Hack Nerd Font",
  "Inconsolata Nerd Font",
}

for _, font in ipairs(preferredFonts) do
  if hs.styledtext.validFont(font) then
    menuItemFont = font
    break
  end
end
if hs.screen.mainScreen():currentMode().w > 2000 then
  menuItemFontSize = 24
  menuMinNumberOfRows = 3
  menuNumberOfColumns = 8
end
if hs.screen.mainScreen():name() == "LG Ultra HD" then
  menuRowHeight = 50
end

--- Helper Functions
function hammerspoonManual()
  hs.doc.hsdocs.forceExternalBrowser(true)
  hs.doc.hsdocs.moduleEntitiesInSidebar(true)
  hs.doc.hsdocs.help()
end
local function submenu(modifier, key, description, menu, ...)
  additional_actions = {...}
  return {entry_type.submenu, modifier, key, description, {
            {action.menu, menu}, table.unpack(additional_actions)
  }}
end

function launcher(modifier, key, description, app, ...)
  additional_actions = {...}
  return {entry_type.action, modifier, key, description, {
            {action.launcher, app}, table.unpack(additional_actions)
  }}
end

local function func(modifier, key, description, func)
  return {entry_type.action, modifier, key, description, {
            {action.func, func}
  }}
end

local function url_opener(modifier, key, description, url)
  return {entry_type.action, modifier, key, description, {
            {action.openurl, url}
  }}
end

--- Layout Functions
local function everyDayCarry()
   local mainScreen = hs.screen{x=0,y=0}
   applications = {"Google Chrome",  "Slack", "iTerm2", "/Applications/Emacs.app"}
   for _, app in ipairs(applications) do
      hs.application.launchOrFocus(app)
   end
   local layout = {
      {"Google Chrome", nil, lo.mainScreen, hs.layout.right25, nil, nil},
      {hs.application.get('com.tinyspeck.slackmacgap'), nil, lo.mainScreen, lo.sw40, nil, nil},
      {"Emacs", nil, lo.mainScreen, lo.mid50, nil, nil},
      {"iTerm2", nil, lo.mainScreen, lo.nw60, nil, nil},
   }
   hs.layout.apply(layout)
end

--- Menu Definitions
menuHammerMenuList = {
  ------------------------------------------------------------------------------------------------
  -- Main Menu
  ------------------------------------------------------------------------------------------------
  [mainMenu] = {
      parentMenu = nil,
      menuHotkey = {{'alt', 'cmd', 'shift', 'ctrl'}, 'space'},
      menuItems = {
          submenu('shift', '/',     'Help',               helpMenu),
          submenu('',      'A',     'Applications',       applicationMenu),
          submenu('',      'B',     'Browser',            browserMenu),
          submenu('',      'D',     'Documents',          documentsMenu),
          submenu('',      'F',     'Finder',             finderMenu),
          submenu('',      'H',     'Hammerspoon',        hammerspoonMenu),
  
          launcher('',     'I',     'iTerm',              'iTerm'),
          launcher('',     'J',     'Emacs',              '/Applications/Emacs.app'),
          launcher('',     'K',     'Chrome',             'com.google.chrome'),
  
          submenu('',      'L',     'Layouts',            layoutMenu),
  
          launcher('',     'M',     'Microsoft Edge',     'Microsoft Edge'),
  
          submenu('shift', 'M',     'Media Controls',     mediaMenu),
  
          launcher('',     'O',     'Slack',              'Slack'),
  
          submenu('',      'R',     'Resolution',         resolutionMenu),
  
          launcher('',     'S',     'Skype for Business', 'Skype for Business'),
  
          submenu('shift', 'S',     'System Preferences', systemMenu),
          submenu('',      'T',     'Toggles',            toggleMenu),
          submenu('',      'X',     'Text',               textMenu),
  
          launcher('',     ';',     'Spotify',            'Spotify'),
          launcher('',     'space', 'Alfred',             'com.runningwithcrayons.Alfred'),
      }
  },
  [helpMenu] = {
      parentMenu = mainMenu,
      menuHotkey = nil,
      menuItems = {
        func('',       'H', 'Hammerspoon Manual',       hammerspoonManual),
        url_opener('', 'M', 'MenuHammer Documentation', 'https://github.com/FryJay/MenuHammer'),
      }
  },
  [applicationMenu] = {
      parentMenu = mainMenu,
      menuHotkey = {{'cmd', 'alt', 'ctrl'}, 'a'},
      menuItems = {
        launcher('', 'E', 'Finder',             'Finder'),
        launcher('', 'I', 'iTerm',              'iTerm'),
        launcher('', 'J', 'Emacs',              '/Applications/Emacs.app'),
        launcher('', 'K', 'Chrome',             'com.google.chrome'),
        launcher('', 'O', 'Slack',              'Slack'),
        launcher('', 'M', 'Microsoft Edge',     'Microsoft Edge'),
        launcher('', 'N', 'Messages',           'Messages'),
        launcher('', 'S', 'Skype for Business', 'Skype for Business'),
        launcher('', ';', 'Spotify',            'Spotify'),
        launcher('', 'X', 'Xcode',              'Xcode'),
  
        submenu('',  'U', 'Utilities',          utilitiesMenu),
      }
  },
  [utilitiesMenu] = {
      parentMenu = applicationMenu,
      menuHotkey = nil,
      menuItems = {
        launcher('',      'A', 'Activity Monitor',   'Activity Monitor'),
        launcher('shift', 'A', 'Airport Utility',    'Airport Utility'),
        launcher('',      'C', 'Console',            'Console'),
        launcher('',      'D', 'Disk Utility',       'Disk Utility'),
        launcher('',      'K', 'Keychain Access',    'Keychain Access'),
        launcher('',      'S', 'System Information', 'System Information'),
        launcher('',      'T', 'Terminal',           'Terminal'),
      }
  },
  [browserMenu] = {
      parentMenu = mainMenu,
      meunHotkey = nil,
      menuItems = {
          {cons.cat.action, '', 'C', "Chrome", {
              {cons.act.launcher, 'Google Chrome'}
          }},
          {cons.cat.action, '', 'F', "Firefox", {
              {cons.act.launcher, 'Firefox'}
          }},
          {cons.cat.action, '', 'M', 'Movie Lookup',
           {
               {cons.act.userinput,
                "movieLookup",
                "Movie Lookup",
                "Enter search criteria"},
               {cons.act.openurl,
                "http://www.google.com/search?q=@@movieLookup@@%20film%20site:wikipedia.org&meta=&btnI"
               },
               {cons.act.openurl,
                "http://www.google.com/search?q=@@movieLookup@@%20site:imdb.com&meta=&btnI"
               },
               {cons.act.openurl,
                "http://www.google.com/search?q=@@movieLookup@@%20site:rottentomatoes.com&meta=&btnI"
               },
          }},
          {cons.cat.action, '', 'S', "Safari", {
              {cons.act.launcher, 'Safari'}
          }},
      }
  },
  [documentsMenu] = {
      parentMenu = mainMenu,
      menuHotkey = nil,
      menuItems = {
          {cons.cat.action, '', 'C', '.config', {
               {cons.act.launcher, 'Finder'},
               {cons.act.keycombo, {'cmd', 'shift'}, 'g'},
               {cons.act.typetext, '~/.config\n'},
          }},
          {cons.cat.action, '', 'D', 'Google Drive (local)', {
               {cons.act.launcher, 'Finder'},
               {cons.act.keycombo, {'cmd', 'shift'}, 'g'},
               {cons.act.typetext, '~/Google Drive\n'},
          }},
          {cons.cat.action, 'shift', 'D', "Google Drive (online)", {
               {cons.act.openurl, "https://drive.google.com/" },
          }},
          {cons.cat.action, '', 'I', 'iCloud Drive (local)', {
               {cons.act.launcher, 'Finder'},
               {cons.act.keycombo, {'cmd', 'shift'}, 'i'},
          }},
          {cons.cat.action, '', 'H', 'Hammerspoon', {
               {cons.act.launcher, 'Finder'},
               {cons.act.keycombo, {'cmd', 'shift'}, 'g'},
               {cons.act.typetext, '~/.hammerspoon\n'},
          }},
          {cons.cat.action, '', 'M', 'MenuHammer Custom Config', {
               {cons.act.openfile, "~/.hammerspoon/menuHammerCustomConfig.lua"},
          }},
          {cons.cat.action, 'shift', 'M', 'MenuHammer Default Config', {
               {cons.act.openfile, "~/.hammerspoon/Spoons/MenuHammer.spoon/MenuConfigDefaults.lua"},
          }},
          {cons.cat.action, 'shift', 'H', 'Hammerspoon init.lua', {
               {cons.act.openfile, "~/.hammerspoon/init.lua"},
          }},
      }
  },
  [finderMenu] = {
      parentMenu = mainMenu,
      menuHotkey = nil,
      menuItems = {
        launcher('',               'A',                  'Applications Folder',  'Finder',  {action.keycombo, {'cmd',  'shift'}, 'a'}),
        launcher('',               'D',                  'Downloads',            'Finder',  {action.keycombo, {'cmd',  'alt'},   'l'}),
        launcher('shift',          'D',                  'Dropbox',              'Finder',
                 {action.keycombo, {'cmd',  'shift'}, 'g'},
                 {action.typetext, '~/Dropbox\n'}),
        launcher('alt',            'D',                  'Desktop',              'Finder',  {action.keycombo, {'cmd',  'shift'}, 'd'}),
        launcher('',               'F',                  'Finder',               'Finder'),
        launcher('',               'G',                  'Go to Folder...',      'Finder',  {action.keycombo, {'cmd',  'shift'}, 'g'}),
        launcher('',               'H',                  'Home',                 'Finder',  {action.keycombo, {'cmd',  'shift'}, 'h'}),
        launcher('shift',          'H',                  'Hammerspoon',          'Finder',
                 {action.keycombo, {'cmd',               'shift'},               'g'},
                 {action.typetext, '~/.hammerspoon\n'}),
        launcher('',               'I',                  'iCloud Drive',         'Finder',  {action.keycombo, {'cmd',  'shift'}, 'i'}),
        launcher('',               'K',                  'Connect to Server...', 'Finder',  {action.keycombo, {'cmd'}, 'k'}),
        launcher('',               'L',                  'Library',              'Finder',  {action.keycombo, {'cmd',  'shift'}, 'l'}),
        launcher('',               'N',                  'Network',              'Finder',  {action.keycombo, {'cmd',  'shift'}, 'k'}),
        launcher('',               'O',                  'Documents',            'Finder',  {action.keycombo, {'cmd',  'shift'}, 'o'}),
        launcher('',               'R',                  'Recent',               'Finder',  {action.keycombo, {'cmd',  'shift'}, 'f'}),
        launcher('',               'U',                  'Utilities',            'Finder',  {action.keycombo, {'cmd',  'shift'}, 'u'}),
      }
  },
  [hammerspoonMenu] = {
    parentMenu = mainMenu,
    menuHotkey = nil,
    menuItems = {
      {cons.cat.action, '', 'C', "Hammerspoon Console", {
         {cons.act.func, function() hs.toggleConsole() end }
      }},
      {cons.cat.action, '', 'H', "Hammerspoon Manual", {
         {cons.act.func, function()
            hs.doc.hsdocs.forceExternalBrowser(true)
            hs.doc.hsdocs.moduleEntitiesInSidebar(true)
            hs.doc.hsdocs.help()
         end }
      }},
      {cons.cat.action, '', 'R', "Reload Hammerspoon", {
         {cons.act.func, function() hs.reload() end }
      }},
      {cons.cat.action, '', 'Q', "Quit Hammerspoon", {
         {cons.act.func, function() os.exit() end }
      }},
    }
  },
  [layoutMenu] = {
      parentMenu = mainMenu,
      menuHotkey = nil,
      menuItems = {
         func('', 'E', 'Every Day Carry', everyDayCarry),
        {cons.cat.action, '', 'D', "Dev Ops", {
           {cons.act.func, function()
              -- See Hammerspoon layout documentation for more info on this
              hs.layout.apply({
                  {"Google Chrome", nil, lo.mainScreen, lo.nw60, nil, nil},
                  {"AWS Console", nil, lo.mainScreen, lo.nw60, nil, nil},
                  {"Slack", nil, lo.mainScreen, lo.sw40, nil, nil},
                  {"Emacs", nil,lo.mainScreen, lo.mid50, nil, nil},
                  {"iTerm2", nil, lo.mainScreen, hs.layout.right25, nil, nil},
              })
           end }
        }},
      }
  },
  [mediaMenu] = {
      parentMenu = mainMenu,
      menuHotkey = nil,
      menuItems = {
          {cons.cat.action, '', 'A', "Music", {
              {cons.act.launcher, "Music"}
          }},
          {cons.cat.action, '', 'H', "Previous Track", {
              {cons.act.mediakey, "previous"}
          }},
          {cons.cat.action, '', 'J', "Volume Down", {
              {cons.act.mediakey, "volume", -10}
          }},
          {cons.cat.action, '', 'K', "Volume Up", {
              {cons.act.mediakey, "volume", 10}
          }},
          {cons.cat.action, '', 'L', "Next Track", {
              {cons.act.mediakey, "next"}
          }},
          {cons.cat.action, '', 'X', "Mute/Unmute", {
              {cons.act.mediakey, "mute"}
          }},
          {cons.cat.action, '', 'S', "Play/Pause", {
              {cons.act.mediakey, "playpause"}
          }},
          {cons.cat.action, '', 'I', "Brightness Down", {
              {cons.act.mediakey, "brightness", -10}
          }},
          {cons.cat.action, '', 'O', "Brightness Up", {
              {cons.act.mediakey, "brightness", 10}
          }},
      }
  },
  [resolutionMenu] = {
    parentMenu = mainMenu,
    menuHotkey = nil,
    menuItems = resolutionMenuItems
  },
  [systemMenu] = {
      parentMenu = mainMenu,
      menuHotkey = nil,
      menuItems = {
          {cons.cat.action, 'shift', 'F', "Force Quit Frontmost App", {
              {cons.act.system, cons.sys.forcequit},
          }},
          {cons.cat.action, '', 'L', "Lock Screen", {
              {cons.act.system, cons.sys.lockscreen},
          }},
          {cons.cat.action, 'shift', 'R', "Restart System", {
              {cons.act.system, cons.sys.restart, true},
          }},
          {cons.cat.action, '', 'S', "Start Screensaver", {
              {cons.act.system, cons.sys.screensaver},
          }},
          {cons.cat.action, 'shift', 'S', "Shutdown System", {
              {cons.act.system, cons.sys.shutdown, true},
          }},
          {cons.cat.action, '', 'Q', 'Logout', {
              {cons.act.system, cons.sys.logout}
          }},
          {cons.cat.action, 'shift', 'Q', 'Logout Immediately', {
              {cons.act.system, cons.sys.logoutnow},
          }},
          {cons.cat.action, '', 'U', "Switch User", {
              {cons.act.system, cons.sys.switchuser, true},
          }},
          {cons.cat.action, '', 'V', 'Activity Monitor', {
              {cons.act.launcher, 'Activity Monitor'},
          }},
          {cons.cat.action, '', 'X', 'System Preferences', {
              {cons.act.launcher, 'System Preferences'},
          }},
      }
  },
  [textMenu] = {
    parentMenu = mainMenu,
    menuHotkey = nil,
    menuItems = {
      {cons.cat.action, '', 'C', 'Remove clipboard format', {
         {cons.act.func, function()
            local pasteboardContents = hs.pasteboard.getContents()
            hs.pasteboard.setContents(pasteboardContents)
         end },
      }},
      {cons.cat.action, '', 'E', 'Empty the clipboard', {
         {cons.act.func, function() hs.pasteboard.setContents("") end}
      }},
      {cons.cat.action, '', 'T', 'Type clipboard contents', {
         {cons.act.typetext, "@@mhClipboardText@@"}
      }},
    }
  },
  [toggleMenu] = {
    parentMenu = mainMenu,
    menuHotkey = nil,
    menuItems = {
      {cons.cat.action, '', 'C', "Caffeine", {
         {cons.act.func, function() toggleCaffeine() end }
      }},
      {cons.cat.action, '', 'D', "Hide/Show Dock", {
         {cons.act.keycombo, {'cmd', 'alt'}, 'd'}
      }},
      {cons.cat.action, '', 'S', "Start Screensaver", {
         {cons.act.system, cons.sys.screensaver},
      }},
      {cons.cat.action, 'shift', 'W', "Disable wi-fi", {
         {cons.act.func, function() hs.wifi.setPower(false) end }
      }},
      {cons.cat.action, '', 'W', "Enable wi-fi", {
         {cons.act.func, function() hs.wifi.setPower(true) end }
      }},
    }
  },
}
