#+TITLE: Custom Functions
#+AUTHOR: Rod Knowlton

* Custom Functions

This file contains custom functions for various purposes.

** Hammerspoon Integration

#+begin_src emacs-lisp :noweb-ref user-config
  ;; Hammerspoon
  (defun rk/reset-hammerspoon ()
    (interactive)
    (shell-command "hs -c \"hs.reload()\""))
#+end_src

** Helm Files Search

#+begin_src emacs-lisp :noweb-ref user-config
  ;; helm-files
  (defun rk/helm-files-do-rg (&optional dir)
    "Search in files with `rg'."
    (interactive)
    ;; --line-number forces line numbers (disabled by default on windows)
    ;; no --vimgrep because it adds column numbers that wgrep can't handle
    ;; see https://github.com/syl20bnr/spacemacs/pull/8065
    (let* ((root-helm-ag-base-command "rg --smart-case --pcre2 --no-heading --color=never --line-number")
           (helm-ag-base-command (if spacemacs-helm-rg-max-column-number
                                     (concat root-helm-ag-base-command " --max-columns=" (number-to-string spacemacs-helm-rg-max-column-number))
                                   root-helm-ag-base-command)))
      (helm-do-ag dir)))
#+end_src


** UUID Generation

#+begin_src emacs-lisp :noweb-ref user-config
  (defun codelahoma/insert-random-uid ()
    (interactive)
    (shell-command "printf %s \"$(uuidgen)\"" t))
#+end_src

** Text Processing Utilities

#+begin_src emacs-lisp :noweb-ref user-config
  (defun copy-lines-matching-re (re)
    "find all lines matching the regexp RE in the current buffer
  putting the matching lines in a buffer named *matching*"
    (interactive "sRegexp to match: ")
    (let ((result-buffer (get-buffer-create "*matching*")))
      (with-current-buffer result-buffer
        (erase-buffer))
      (save-match-data
        (save-excursion
          (goto-char (point-min))
          (while (re-search-forward re nil t)
            (princ (buffer-substring-no-properties (line-beginning-position)
                                                   (line-beginning-position 2))
                   result-buffer))))
      (pop-to-buffer result-buffer)))
#+end_src

** CSV Manipulation

#+begin_src emacs-lisp :noweb-ref user-config
  (defun apply-function-to-region (fn)
    "Apply a function to a region."
    (interactive "Function to apply to region: ")
    (save-excursion
      (let* ((beg (region-beginning))
             (end (region-end))
             (resulting-text
              (funcall fn
                       (buffer-substring-no-properties beg end))))
        (kill-region beg end)
        (insert resulting-text))))

  (defun sort-csv (txt)
    "Sort a comma separated string."
    (mapconcat 'identity
               (sort (split-string txt ",") 'string< ) ","))

  (defun sort-csv-region ()
    "Sort a region of comma separated text."
    (interactive)
    (apply-function-to-region 'sort-csv))
#+end_src

** Markdown Preview

#+begin_src emacs-lisp :noweb-ref user-config
  (defun markdown-html (buffer)
    (princ (with-current-buffer buffer
             (format "<!DOCTYPE html><html><title>Impatient Markdown</title><xmp theme=\"united\" style=\"display:none;\"> %s  </xmp><script src=\"http://strapdownjs.com/v/0.2/strapdown.js\"></script></html>" (buffer-substring-no-properties (point-min) (point-max))))
           (current-buffer)))

  (defun markdown-preview-like-god ()
    (interactive)
    (impatient-mode 1)
    (setq imp-user-filter #'markdown-html)
    (cl-incf imp-last-state)
    (imp--notify-clients))
#+end_src

** Evil Navigation Enhancements

#+begin_src emacs-lisp :noweb-ref user-config
  (defun evil-scroll-line-to-center (count)
    "Scrolls line number COUNT (or the cursor line) to the center of the window."
    (interactive "P")
    (evil-save-column
      (evil-ensure-column
        (goto-char (point-min))
        (forward-line (1- count)))
      (evil-window-middle)))

  (advice-add 'evil-goto-line :after #'evil-scroll-line-to-center)
  (advice-add 'evil-search-next :after #'evil-scroll-line-to-center)
  (advice-add 'evil-search-previous :after #'evil-scroll-line-to-center)
  (advice-add 'helm-grep-action :after #'evil-scroll-line-to-center)
  (advice-add 'helm-grep-action :after #'evil-scroll-line-to-center)
  (advice-add 'helm-projectile-grep :after #'evil-scroll-line-to-center)
  (advice-add 'helm-ag--actions-ag-action :after #'evil-scroll-line-to-center)
  (advice-add 'helm-ag--action-find-file :after #'evil-scroll-line-to-center)
  (advice-add 'xref-pop-marker-stack :after #'evil-scroll-line-to-center)
  (advice-add 'evil-goto-definition :after #'evil-scroll-line-to-center)
  (advice-add 'org-open-at-point :after #'evil-scroll-line-to-center)
  (advice-add 'evil-ex-search-next :after #'evil-scroll-line-to-center)
  (advice-add 'evil-avy-goto-char-timer :after #'evil-scroll-line-to-center)
  (advice-add 'better-jumper-jump-backward :after #'evil-scroll-line-to-center)
  (advice-add 'better-jumper-jump-forward :after #'evil-scroll-line-to-center)
  (add-hook 'bookmark-after-jump-hook 'evil-scroll-line-to-center)
#+end_src

** Frame and Layout Management

#+begin_src emacs-lisp :noweb-ref user-config
  ;; rk-layout
  (load-framegeometry)
#+end_src