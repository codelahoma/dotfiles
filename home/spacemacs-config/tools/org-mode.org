#+TITLE: Org Mode Configuration
#+AUTHOR: Rod Knowlton

* Org Mode Configuration

This file contains comprehensive Org mode configuration for Spacemacs.

** Layer Variables

#+begin_src emacs-lisp :noweb-ref config-layers
  (org :variables
       org-appear-autolinks nil
       org-enable-appear-support t
       org-enable-bootstrap-support t
       org-enable-github-support t
       org-enable-hugo-support nil
       org-enable-jira-support t
       jiralib-url "https://kitewire.atlassian.net:443"
       org-enable-modern-support t
       org-enable-notifications t
       org-enable-org-contacts-support nil
       org-enable-org-journal-support t
       org-enable-reveal-js-support t
       org-enable-roam-support t
       org-enable-roam-ui t
       org-enable-sticky-header t
       org-enable-transclusion-support t
       org-enable-trello-support t
       org-projectile-file "TODOs.org"
       org-start-notification-daemon-on-startup t
       org-todo-dependencies-strategy 'semiauto)
#+end_src

** Additional Packages

#+begin_src emacs-lisp :noweb-ref additional-packages
  ob-async
  ox-slack
  org-superstar
  sqlite3
  org-roam-bibtex
  org-noter
  org-noter-pdftools
#+end_src

** GTD Workflow Configuration

*** Base Directory Configuration
#+begin_src emacs-lisp :noweb-ref user-config
  ;; Centralized org directory configuration
  (defvar rk/org-directory "~/personal/org-files-new/"
    "Base directory for all org files. Change this to point to your actual org directory.")
  
  (defun rk/org-file (filename)
    "Construct full path to org file in base directory."
    (expand-file-name filename rk/org-directory))
  
  (defun rk/org-subdir-file (subdir filename)
    "Construct full path to org file in subdirectory."
    (expand-file-name filename (expand-file-name subdir rk/org-directory)))
#+end_src

*** TODO Keywords and Context Tags
#+begin_src emacs-lisp :noweb-ref user-config
  ;; GTD TODO keywords
  (setq org-todo-keywords
        '((sequence "NEXT(n)" "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))

  ;; Context tags for work/personal separation
  (setq org-tag-alist '(("@work" . ?w)
                        ("@personal" . ?p)
                        ("@home" . ?h)
                        ("@office" . ?o)
                        ("@phone" . ?c)
                        ("@computer" . ?m)
                        ("project" . ?j)
                        ("someday" . ?s)))
#+end_src

*** Org Agenda Files
#+begin_src emacs-lisp :noweb-ref user-config
  ;; Default to unified mode (all files)
  (setq org-agenda-files (list rk/org-directory))
#+end_src

*** Capture Templates
#+begin_src emacs-lisp :noweb-ref user-config
  (setq org-capture-templates
        `(;; Universal inbox
          ("i" "Inbox" entry (file ,(rk/org-file "inbox.org"))
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
          
          ;; Work captures
          ("w" "Work Templates")
          ("wt" "Work Task" entry (file ,(rk/org-subdir-file "work" "gtd.org"))
           "* TODO %? :@work:\n  %U\n  %a\n  %i" :empty-lines 1)
          ("wp" "Work Project" entry (file ,(rk/org-subdir-file "work" "projects.org"))
           "* TODO %? [/] :@work:project:\n  DEADLINE: %^{Deadline}t\n  %U\n  %a\n  %i")
          ("wn" "Work Note" plain (function org-roam-node-insert)
           "%?" :empty-lines 1 :unnarrowed t)
          
          ;; Personal captures  
          ("p" "Personal Templates")
          ("pt" "Personal Task" entry (file ,(rk/org-subdir-file "personal" "gtd.org"))
           "* TODO %? :@personal:\n  %U\n  %a\n  %i" :empty-lines 1)
          ("pp" "Personal Project" entry (file ,(rk/org-subdir-file "personal" "projects.org"))
           "* TODO %? [/] :@personal:project:\n  DEADLINE: %^{Deadline}t\n  %U\n  %a\n  %i")
          ("pn" "Personal Note" plain (function org-roam-node-insert)
           "%?" :empty-lines 1 :unnarrowed t)))
#+end_src

*** Custom Agenda Views
#+begin_src emacs-lisp :noweb-ref user-config
  (setq org-agenda-custom-commands
        '(;; Work-only views
          ("w" "Work Dashboard"
           ((agenda "" ((org-agenda-span 7)
                        (org-agenda-tag-filter-preset '("+@work"))))
            (todo "NEXT" ((org-agenda-overriding-header "Work Next Actions")
                          (org-agenda-tag-filter-preset '("+@work"))))
            (todo "WAITING" ((org-agenda-overriding-header "Work Waiting For")
                             (org-agenda-tag-filter-preset '("+@work"))))
            (tags-todo "@work+project+LEVEL=2" 
                       ((org-agenda-overriding-header "Active Work Projects")))))
          
          ;; Personal-only views
          ("p" "Personal Dashboard"
           ((agenda "" ((org-agenda-span 7)
                        (org-agenda-tag-filter-preset '("+@personal"))))
            (todo "NEXT" ((org-agenda-overriding-header "Personal Next Actions")
                          (org-agenda-tag-filter-preset '("+@personal"))))
            (todo "WAITING" ((org-agenda-overriding-header "Personal Waiting For")
                             (org-agenda-tag-filter-preset '("+@personal"))))
            (tags-todo "@personal+project+LEVEL=2"
                       ((org-agenda-overriding-header "Active Personal Projects")))))
          
          ;; Unified view (everything)
          ("u" "Unified Dashboard"
           ((agenda "" ((org-agenda-span 7)))
            (todo "NEXT" ((org-agenda-overriding-header "All Next Actions")))
            (todo "WAITING" ((org-agenda-overriding-header "All Waiting For")))
            (tags-todo "project+LEVEL=2"
                       ((org-agenda-overriding-header "All Active Projects")))))))
#+end_src

*** Context Switching Functions
#+begin_src emacs-lisp :noweb-ref user-config
  (defun org-work-mode ()
    "Switch to work-focused org environment."
    (interactive)
    (setq org-agenda-files (list (rk/org-subdir-file "work" "") 
                                 (rk/org-file "inbox.org")))
    (message "Switched to Work Mode"))

  (defun org-personal-mode ()
    "Switch to personal-focused org environment."
    (interactive)
    (setq org-agenda-files (list (rk/org-subdir-file "personal" "") 
                                 (rk/org-file "inbox.org")))
    (message "Switched to Personal Mode"))

  (defun org-unified-mode ()
    "Switch to unified org environment (everything)."
    (interactive)
    (setq org-agenda-files (list rk/org-directory))
    (message "Switched to Unified Mode"))
#+end_src

*** Keybindings for Unified GTD System
#+begin_src emacs-lisp :noweb-ref user-config
  ;; Extend existing "oo" org prefix
  (spacemacs/declare-prefix "oo" "org")

  ;; Context switching
  (spacemacs/declare-prefix "oom" "mode")
  (spacemacs/set-leader-keys
    "oomw" 'org-work-mode
    "oomp" 'org-personal-mode  
    "oomu" 'org-unified-mode)

  ;; Agenda dashboards  
  (spacemacs/declare-prefix "ooa" "agenda")
  (spacemacs/set-leader-keys
    "ooaw" (lambda () (interactive) (org-agenda nil "w"))  ; Work dashboard
    "ooap" (lambda () (interactive) (org-agenda nil "p"))  ; Personal dashboard  
    "ooau" (lambda () (interactive) (org-agenda nil "u"))  ; Unified dashboard
    "ooaa" 'org-agenda)                                    ; Standard agenda

  ;; Capture templates
  (spacemacs/declare-prefix "ooc" "capture")
  (spacemacs/set-leader-keys
    "ooci" (lambda () (interactive) (org-capture nil "i"))   ; Inbox
    "oocw" (lambda () (interactive) (org-capture nil "wt"))  ; Work task
    "oocp" (lambda () (interactive) (org-capture nil "pt"))  ; Personal task
    "oocn" (lambda () (interactive) (org-capture nil "wn"))  ; Work note
    "oocN" (lambda () (interactive) (org-capture nil "pn"))  ; Personal note
    "oocc" 'org-capture)                                     ; Full capture menu

  ;; Quick navigation
  (spacemacs/declare-prefix "oog" "goto")
  (spacemacs/set-leader-keys
    "oogi" (lambda () (interactive) (find-file (rk/org-file "inbox.org")))
    "oogw" (lambda () (interactive) (find-file (rk/org-subdir-file "work" "gtd.org")))
    "oogp" (lambda () (interactive) (find-file (rk/org-subdir-file "personal" "gtd.org")))
    "oogr" 'org-roam-node-find)

  ;; Org-roam integration
  (spacemacs/declare-prefix "oor" "roam")
  (spacemacs/set-leader-keys
    "oorf" 'org-roam-node-find
    "oori" 'org-roam-node-insert
    "oort" 'org-roam-dailies-goto-today
    "oory" 'org-roam-dailies-goto-yesterday
    "oord" 'org-roam-dailies-goto-date
    "oorc" 'org-roam-dailies-capture-today
    "oorb" 'org-roam-buffer-toggle)
#+end_src

** Appearance Configuration

*** Font Faces
#+begin_src emacs-lisp :noweb no-export :noweb-ref user-config
  (let* ((variable-tuple
          (cond
           ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
           ((x-list-fonts "Avenir Next") '(:font "Avenir Next"))
           ((x-list-fonts "Verdana")         '(:font "Verdana"))
           ((x-list-fonts "ETBembo") '(:font "ETBembo"))
           ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
           ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
           (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
         (headline           `(:inherit default :weight normal )))

    (custom-theme-set-faces
     'user
     '(fixed-pitch ((t ( :family "FiraMono Nerd Font" :height 1.0))))
     '(variable-pitch ((t (:family "Source Sans Pro" :height 1.1))))
     `(org-document-title ((t (,@headline :inherit fixed-pitch :height 2.5 :underline nil))))
     ;; Ocean colors
     `(org-level-1 ((t (,@headline :inherit fixed-pitch :height 1.8 ))))
     `(org-level-2 ((t (,@headline :inherit fixed-pitch :height 1.5 ))))
     `(org-level-3 ((t (,@headline :inherit fixed-pitch :height 1.4 ))))
     `(org-level-4 ((t (,@headline :inherit fixed-pitch :height 1.3 ))))
     `(org-level-5 ((t (,@headline :inherit fixed-pitch :height 1.2))))
     `(org-level-6 ((t (,@headline :inherit fixed-pitch :height 1.2))))
     `(org-level-7 ((t (,@headline :inherit fixed-pitch :height 1.2))))
     `(org-level-8 ((t (,@headline :inherit fixed-pitch :height 1.2))))
     '(org-block ((t (:inherit fixed-pitch :height 0.8))))
     '(org-code ((t (:inherit (shadow fixed-pitch)))))
     '(org-date ((t (:inherit (font-lock-comment-face fixed-pitch) :height 0.9))))
     '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
     '(org-done ((t ( :font "Fira Sans" :height 1.0  :weight bold))))
     '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
     '(org-link ((t (:underline t))))
     '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     '(org-property-value ((t (:inherit fixed-pitch))))
     '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     '(org-table ((t (:inherit fixed-pitch ))))
     '(org-tag ((t (:inherit (shadow fixed-pitch)  :height 0.5))))
     '(org-todo ((t ( :font "Fira Sans" :height 0.8 ))))
     '(org-verbatim ((t (:inherit (shadow fixed-pitch)))))))
#+end_src

*** Heading Color Schemes
#+begin_src emacs-lisp :noweb-ref user-config
  (defvar org-heading-colors-schemes
    '(("Arctic"    . ("LightCyan" "AliceBlue" "LavenderBlue" "GhostWhite" "LightSteelBlue"))
      ("Autumn"    . ("OrangeRed" "DarkGoldenrod" "Sienna" "Peru" "Wheat4"))
      ("Candy"     . ("HotPink" "DeepPink" "VioletRed" "MediumVioletRed" "RosyBrown"))
      ("Cyber"     . ("DeepPink" "Cyan" "SpringGreen" "BlueViolet" "DimGray"))
      ("Desert"    . ("Tan4" "SandyBrown" "PeachPuff3" "Wheat4" "Bisque4"))
      ("Earth"     . ("Sienna" "RosyBrown" "DarkKhaki" "Tan" "Wheat4"))
      ("Forest"    . ("ForestGreen" "OliveDrab" "DarkOliveGreen" "YellowGreen" "DarkSeaGreen"))
      ("Galaxy"    . ("MediumSlateBlue" "MediumPurple" "Purple" "DarkViolet" "SlateGray"))
      ("Garden"    . ("MediumSeaGreen" "DarkSeaGreen" "PaleGreen" "LightGreen" "Gray"))
      ("Meadow"    . ("MediumAquamarine" "PaleGreen" "LightGreen" "DarkSeaGreen" "LightSlateGray"))
      ("Mountain"  . ("RoyalBlue4" "SteelBlue4" "DodgerBlue4" "SlateBlue4" "LightSlateGray"))
      ("Nordic"    . ("SteelBlue" "LightSteelBlue" "SlateGray" "LightSlateGray" "Gray"))
      ("Ocean"     . ("DeepSkyBlue1" "MediumSpringGreen" "Turquoise" "SlateBlue" "CadetBlue"))
      ("Pastel"    . ("SkyBlue" "LightGoldenrod" "PaleGreen" "Salmon" "LightGray"))
      ("Retro"     . ("Magenta3" "Cyan3" "Yellow3" "Green3" "Gray3"))
      ("Royal"     . ("RoyalBlue" "MediumBlue" "Navy" "MidnightBlue" "SlateGray"))
      ("Seaside"   . ("CadetBlue" "LightBlue" "PowderBlue" "PaleTurquoise" "LightSlateGray"))
      ("Sunset"    . ("MediumVioletRed" "DeepPink" "HotPink" "LightPink" "RosyBrown"))
      ("Twilight"  . ("MediumPurple" "SlateBlue" "DarkSlateBlue" "Navy" "DimGray"))
      ("Vibrant"   . ("DodgerBlue1" "Gold1" "Chartreuse1" "OrangeRed1" "Gray50"))
      ("Volcanic"  . ("OrangeRed" "Firebrick" "DarkRed" "IndianRed" "RosyBrown4"))
      ("Wine"      . ("Maroon" "VioletRed" "MediumVioletRed" "PaleVioletRed" "RosyBrown")))
    "Alist of org heading color schemes. Each scheme contains 5 colors:
  4 for different heading levels and 1 for done states.")

  (defun preview-org-colors ()
    "Preview all color schemes in a temporary buffer."
    (interactive)
    (let ((preview-buffer (get-buffer-create "*Org Color Schemes Preview*")))
      (with-current-buffer preview-buffer
        (erase-buffer)
        (fundamental-mode)
        (dolist (scheme org-heading-colors-schemes)
          (let* ((scheme-name (car scheme))
                 (colors (cdr scheme)))

            ;; Insert the theme name
            (let ((start-pos (point)))
              (insert (format "* %s Theme\n" scheme-name))
              (add-text-properties start-pos (point)
                                 `(face (:weight bold :height 1.5))))

            ;; Insert each level with its color
            (dotimes (i 4)
              (let ((start-pos (point)))
                (insert (format "%s Level %d Heading (%s)\n"
                              (make-string (1+ i) ?*)
                              (1+ i)
                              (nth i colors)))
                (add-text-properties
                 start-pos (point)
                 `(face (:foreground ,(nth i colors) :height ,(- 1.4 (* i 0.1)))))))

            ;; Add done state preview
            (let ((start-pos (point)))
              (insert (format "* DONE Example Done Heading (%s)\n" (nth 4 colors)))
              (add-text-properties
               start-pos (point)
               `(face (:foreground ,(nth 4 colors) :height 1.3))))

            (insert "\n"))))

      (display-buffer preview-buffer)))

  (defun switch-org-colors (scheme-name)
    "Switch org heading colors to a predefined scheme.
  SCHEME-NAME should be one of the defined color schemes."
    (interactive
     (list (completing-read "Choose color scheme: "
                           (mapcar 'car org-heading-colors-schemes))))
    (let ((colors (cdr (assoc scheme-name org-heading-colors-schemes))))
      (when colors
        ;; Set heading colors
        (dotimes (i 4)
          (let ((level (1+ i)))
            (custom-theme-set-faces
             'user
             `(,(intern (format "org-level-%d" level))
               ((t (:foreground ,(nth i colors))))))))
        
        ;; Set done state color
        (custom-theme-set-faces
         'user
         `(org-done ((t (:foreground ,(nth 4 colors) :weight bold))))))))
  
  ;; Switch to default theme on load
  (switch-org-colors "Ocean")
#+end_src

*** Org Superstar Configuration
#+begin_src emacs-lisp :noweb-ref user-config
  ;; org-superstar
  (setq org-ellipsis "⤵")

  ;; Different bullet sets
  (defvar org-superstar-bullet-sets
    '(("default" . ("◉" "○" "✸" "✿" "◇"))
      ("minimal" . ("•" "○" "▸" "▹" "▹"))
      ("ornate" . ("✦" "◈" "◆" "◇" "○"))
      ("fancy" . ("✤" "✸" "✿" "◉" "○"))
      ("stars" . ("★" "☆" "✦" "✧" "○"))
      ("arrows" . ("▶" "▷" "◀" "◁" "○"))
      ("dots" . ("●" "◉" "○" "◎" "○"))
      ("mixed" . ("☰" "☷" "☵" "☲" "○"))
      ("elegant" . ("❖" "◈" "⬟" "○" "◇")))
    "Alist of org-superstar bullet sets.")

  (defun switch-org-bullets (set-name)
    "Switch org-superstar bullets to a predefined set.
  SET-NAME should be one of the defined bullet sets."
    (interactive
     (list (completing-read "Choose bullet set: "
                           (mapcar 'car org-superstar-bullet-sets))))
    (let ((bullets (cdr (assoc set-name org-superstar-bullet-sets))))
      (when bullets
        (setq org-superstar-headline-bullets-list bullets)
        (message "Switched to %s bullet set" set-name)))
    (when (derived-mode-p 'org-mode)
      (org-superstar-mode -1)
      (org-superstar-mode 1)))

  ;; Select the mixed set at start up
  (with-eval-after-load 'org
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
    (switch-org-bullets "mixed"))
#+end_src

** Org-Reveal Configuration

#+begin_src emacs-lisp :noweb-ref user-config
  ;; Org-Reveal
  (setq org-re-reveal-root "/Users/rodk/github/reveal.js")
  (setq org-re-reveal-revealjs-version "4")
  (setq org-re-reveal-theme "serif")
  (setq org-re-reveal-transition "convex")
#+end_src

** Org-Babel Configuration

#+begin_src emacs-lisp :noweb-ref user-config
  ;; Org Babel
  (setq org-babel-load-languages
        '((emacs-lisp . t)
          (python . t)
          (js . t)
          (typescript . t)
          (ruby . t)
          (C . t)
          (css . t)
          (sass . t)
          (shell . t)))

  (setq org-confirm-babel-evaluate nil)
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)

  (setq org-babel-default-header-args
        (cons '(:noweb . "yes")
              (assq-delete-all :noweb org-babel-default-header-args))
        org-babel-default-header-args
        (cons '(:tangle . "yes")
              (assq-delete-all :tangle org-babel-default-header-args))
        org-babel-default-header-args
        (cons '(:comments . "both")
              (assq-delete-all :comments org-babel-default-header-args)))
#+end_src


** YAML Support for Org-Babel

#+begin_src emacs-lisp :noweb-ref user-config
  ;; Custom Yaml support for org-babel
  (defun org-babel-execute:yaml (body params) body)
#+end_src

** Custom Functions

*** Copy for Claude
#+begin_src emacs-lisp :noweb-ref user-config
  (require 'thingatpt)
  (defun rk/maybe-filename-with-line()
    "Return the filename at point if it exists, otherwise nil."
    (save-excursion
      (let ((filename (thing-at-point 'filename)))
        (if (and filename (file-exists-p filename))
            filename
          nil))))

  (defun rk/target-file-and-line()
    "Returns a string with the file name and current line."
    (interactive)
    (let ((filename (file-name-nondirectory (buffer-file-name)))
          (line-num (line-number-at-pos)))
      (concat "File: " filename ", Line " (number-to-string line-num))))

  (defun rk/reference-for-claude()
    "Return a description of the context."
    (let ((target-filename (rk/maybe-filename-with-line)))
      (if target-filename
          (concat "Target: " target-filename)
        (rk/target-file-and-line))))

  (defun rk/clip-for-claude()
    "Kills the region and changes the first element of the kill ring."
    (interactive)
    (when (region-active-p)
      (let ((reference-context (rk/reference-for-claude))
            (text-to-copy (buffer-substring-no-properties (region-beginning) (region-end))))
        (copy-region-as-kill (region-beginning) (region-end))
        (kill-new (concat reference-context "\n\n" text-to-copy))
        (message "Copied for Claude with reference: %s" reference-context))))
#+end_src

** Encryption Setup

#+begin_src emacs-lisp :noweb-ref user-config
  ;; epa encryption
  (require 'epa-file)
  (setq exec-path (append exec-path '("/opt/homebrew/bin")))
  (custom-set-variables '(epg-gpg-program "gpg"))
  (epa-file-enable)
#+end_src

** Org Keybindings

#+begin_src emacs-lisp :noweb-ref private-key-bindings
  ;; Org-specific keybindings can be added here
#+end_src