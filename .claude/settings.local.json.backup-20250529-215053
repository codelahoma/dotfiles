{
  "permissions": {
    "allow": [
      "mcp__git__git_status",
      "mcp__git__git_add",
      "mcp__git__git_commit",
      "mcp__git__git_diff",
      "mcp__git__git_diff_unstaged",
      "mcp__git__git_diff_staged",
      "mcp__git__git_log",
      "mcp__git__git_reset",
      "mcp__git__git_create_branch",
      "mcp__git__git_checkout",
      "mcp__git__git_show",
      "mcp__filesystem__read_file",
      "mcp__filesystem__read_multiple_files",
      "mcp__filesystem__write_file",
      "mcp__filesystem__edit_file",
      "mcp__filesystem__create_directory",
      "mcp__filesystem__list_directory",
      "mcp__filesystem__directory_tree",
      "mcp__filesystem__move_file",
      "mcp__filesystem__search_files",
      "mcp__filesystem__get_file_info",
      "mcp__filesystem__list_allowed_directories",
      "mcp__memory__create_entities",
      "mcp__memory__create_relations",
      "mcp__memory__add_observations",
      "mcp__memory__delete_entities",
      "mcp__memory__delete_observations",
      "mcp__memory__delete_relations",
      "mcp__memory__read_graph",
      "mcp__memory__search_nodes",
      "mcp__memory__open_nodes",
      "mcp__github__create_or_update_file",
      "mcp__github__search_repositories",
      "mcp__github__create_repository",
      "mcp__github__get_file_contents",
      "mcp__github__push_files",
      "mcp__github__create_issue",
      "mcp__github__create_pull_request",
      "mcp__github__fork_repository",
      "mcp__github__create_branch",
      "mcp__github__list_commits",
      "mcp__github__list_issues",
      "mcp__github__update_issue",
      "mcp__github__add_issue_comment",
      "mcp__github__search_code",
      "mcp__github__search_issues",
      "mcp__github__search_users",
      "mcp__github__get_issue",
      "mcp__github__get_pull_request",
      "mcp__github__list_pull_requests",
      "mcp__github__create_pull_request_review",
      "mcp__github__merge_pull_request",
      "mcp__github__get_pull_request_files",
      "mcp__github__get_pull_request_status",
      "mcp__github__update_pull_request_branch",
      "mcp__github__get_pull_request_comments",
      "mcp__github__get_pull_request_reviews",
      "mcp__sqlite__read_query",
      "mcp__sqlite__write_query",
      "mcp__sqlite__create_table",
      "mcp__sqlite__list_tables",
      "mcp__sqlite__describe_table",
      "mcp__puppeteer__puppeteer_navigate",
      "mcp__puppeteer__puppeteer_screenshot",
      "mcp__puppeteer__puppeteer_click",
      "mcp__puppeteer__puppeteer_fill",
      "mcp__puppeteer__puppeteer_select",
      "mcp__puppeteer__puppeteer_hover",
      "mcp__puppeteer__puppeteer_evaluate",
      "mcp__basic-memory__delete_note",
      "mcp__basic-memory__read_content",
      "mcp__basic-memory__build_context",
      "mcp__basic-memory__recent_activity",
      "mcp__basic-memory__search_notes",
      "mcp__basic-memory__read_note",
      "mcp__basic-memory__write_note",
      "mcp__basic-memory__canvas",
      "mcp__basic-memory__project_info",
      "Bash(git apply:*)",
      "Bash(git am:*)",
      "Bash(git push:*)",
      "Bash(git pull:*)",
      "Bash(grep:*)",
      "Bash(find:*)",
      "Bash(python:*)",
      "Bash(python3:*)",
      "Bash(./bin/*:*)",
      "Bash(/Users/rodk/github/flowloom/bin/*:*)",
      "Bash(cp:*)",
      "Bash(diff:*)",
      "Bash(chmod:*)",
      "Bash(${FLOWLOOM_WORK_DIR:-.meta-claude}/bin/recent_plans:*)",
      "Bash(./bin/recent_plans)",
      "Bash(ls:*)",
      "Bash(./tests/session/test_core_session.sh:*)",
      "Bash(bash:*)",
      "Bash(./bin/sync_claude_commands.sh:*)",
      "Bash(test -r .git/HEAD)",
      "Bash(test:*)",
      "Bash(git cherry-pick:*)",
      "Bash(mkdir:*)",
      "Bash(git ls-tree:*)",
      "Bash(./bin/sync-flowloom-bidirectional.sh:*)",
      "Bash(cloc:*)",
      "Bash(./tests/session/test_state_management.sh:*)",
      "Bash(timeout:*)",
      "Bash(./bin/session_state.sh:*)",
      "Bash(mkdir:*)",
      "Bash(../bin/session_state.sh:*)",
      "Bash(./bin/session_manager.sh:*)",
      "Bash(rg:*)",
      "Bash(export FLOWLOOM_WORK_DIR=\"/Users/rodk/github/flowloom\")",
      "Bash(cat:*)",
      "Bash(bin/session_manager.sh:*)",
      "Bash(./bin/session_utils.sh:*)",
      "Bash(BASH_XTRACEFD=1 bash -x ./bin/session_manager.sh start \"test\" 2 >& 1)",
      "Bash(./test_session_isolation.sh:*)",
      "Bash(./test_worktree_isolation.sh:*)",
      "Bash(git status:*)",
      "Bash(git add:*)",
      "Bash(echo:*)",
      "Bash(git worktree:*)",
      "Bash(git rev-parse:*)",
      "Bash(./bin/session_auto_cleanup.sh:*)",
      "Bash(gh repo list:*)",
      "Bash(git commit:*)",
      "Bash(#!/bin/bash\necho \"=== Checking worktrees for uncommitted changes ===\"\n\n# Get list of worktrees\nworktrees=$(git worktree list --porcelain | grep \"^worktree \" | cut -d' ' -f2-)\n\n# Check each worktree\nfor worktree in $worktrees; do\n    if [ \"$worktree\" != \"/Users/rodk/github/flowloom\" ]; then  # Skip main worktree\n        if [ -d \"$worktree\" ]; then\n            cd \"$worktree\" 2>/dev/null\n            if [ $? -eq 0 ]; then\n                status=$(git status --short)\n                if [ -n \"$status\" ]; then\n                    echo -e \"\\n--- $worktree (UNCOMMITTED CHANGES) ---\"\n                    echo \"$status\"\n                fi\n                cd - > /dev/null\n            fi\n        fi\n    fi\ndone)",
      "Bash(#!/bin/bash\necho \"Checking session worktrees for uncommitted changes...\"\necho\n\n# Counter for worktrees with changes\ncount=0\n\n# Check root session directories\nfor dir in session-*; do\n    if [ -d \"$dir\" ]; then\n        cd \"$dir\" 2>/dev/null\n        if git rev-parse --git-dir >/dev/null 2>&1; then\n            status=$(git status --porcelain 2>/dev/null)\n            if [ -n \"$status\" ]; then\n                echo \"✗ $dir has uncommitted changes:\"\n                git status --short\n                echo\n                ((count++))\n            else\n                echo \"✓ $dir is clean\"\n            fi\n        fi\n        cd ..\n    fi\ndone\n\n# Check sessions directory\nif [ -d \"./sessions\" ]; then\n    for dir in ./sessions/*; do\n        if [ -d \"$dir\" ]; then\n            cd \"$dir\" 2>/dev/null\n            if git rev-parse --git-dir >/dev/null 2>&1; then\n                status=$(git status --porcelain 2>/dev/null)\n                if [ -n \"$status\" ]; then\n                    echo \"✗ $dir has uncommitted changes:\"\n                    git status --short\n                    echo\n                    ((count++))\n                else\n                    echo \"✓ $dir is clean\"\n                fi\n            fi\n            cd - >/dev/null 2>&1\n        fi\n    done\nfi\n\necho\necho \"Total worktrees with uncommitted changes: $count\")",
      "Bash(git reset:*)",
      "Bash(git stash:*)",
      "Bash(./bin/format-footer.sh:*)",
      "Bash(./bin/get_shell_pid.sh:*)",
      "Bash(mv:*)",
      "Bash(./bin/check-startup-directory.sh:*)",
      "Bash(./bin/clip.sh:*)",
      "Bash(./bin/clipboard:*)",
      "Bash(rmdir:*)",
      "Bash(/Users/rodk/github/flowloom/bin/recent_plans:*)",
      "Bash(FLOWLOOM_DIR=/Users/rodk/github/flowloom/sessions/session-37783-feature ./bin/coordination_init.sh init)",
      "Bash(./tests/test_coordination_infrastructure.sh:*)",
      "Bash(FLOWLOOM_DIR=/Users/rodk/github/flowloom/sessions/session-37783-feature ./bin/coordination_init.sh health)",
      "Bash($HOME/github/flowloom/bin/flowloom:*)",
      "Bash(./bin/flowloom.py check:*)",
      "Bash(./bin/timeline.py)",
      "Bash(gh pr view:*)",
      "Bash(gh issue create:*)",
      "Bash(./bin/clipboard:*)",
      "Bash(docker run:*)",
      "Bash(docker manifest inspect:*)",
      "Bash(flowloom-web:*)",
      "Bash(./tests/test_memory_coordination.sh:*)",
      "Bash(./sessions/session-37783-feature/tests/test_memory_coordination.sh)",
      "Bash(./sessions/session-37783-feature/tests/test_coordination_commands.sh)",
      "Bash(tmux list-sessions:*)",
      "Bash(/worker:complete task_project_structure_85299)",
      "WebFetch(domain:codelahoma.com)",
      "Bash(uv pip list:*)",
      "Bash(export PATH=\"$HOME/.local/bin:$PATH\")",
      "Bash(unset VIRTUAL_ENV)",
      "Bash(uv sync:*)",
      "Bash(./bin/flowloom-session:*)",
      "Bash(./bin/test-session-integration.sh:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(./bin/get_current_session.sh:*)",
      "Bash(PYTHONPATH=packages python3 -c \"\nfrom flowloom_session import quick_switch_session_context\nimport json\nresult = quick_switch_session_context('testing')\nprint(json.dumps(result, indent=2))\n\")",
      "Bash(pip search:*)",
      "Bash(flowmon:*)",
      "Bash(/Users/rodk/Library/Python/3.9/bin/flowmon --help)",
      "Bash(PYTHONPATH=. python -m flowloom_installer.cli --help)",
      "Bash(touch:*)",
      "Bash(uv run:*)",
      "Bash(uv add:*)",
      "Bash(pytest:*)",
      "Bash(uv run:*)",
      "Bash(pip install:*)",
      "Bash(/Users/rodk/Library/Python/3.9/bin/python -m pytest tests/unit/ -v)",
      "Bash(slashload:*)",
      "Bash(./bin/flowloom-config.py validate:*)",
      "Bash(./bin/flowloom-config.py get:*)",
      "Bash(./install-flowloom.py:*)",
      "Bash(./bin/flowloom-config-simple.py get:*)",
      "Bash(gh api:*)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "memory",
    "filesystem",
    "brave-search",
    "sequentialthinking",
    "context7",
    "git",
    "sqlite",
    "github",
    "basic-memory",
    "puppeteer"
  ]
}