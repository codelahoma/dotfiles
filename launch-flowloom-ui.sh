#!/bin/bash

# FlowLoom UI Launcher
# Launches UI and Terminal Bridge in background without blocking Claude

echo "🚀 FlowLoom UI Launcher"
echo "====================="
echo

# Check if Claude is running in current terminal
if [[ "$TERM_PROGRAM" == "Apple_Terminal" ]] && pgrep -f "claude" > /dev/null; then
    echo "✅ Claude detected in terminal"
else
    echo "⚠️  Warning: Make sure Claude is running in this terminal"
    echo "   If not, press Ctrl+C and run 'claude' first"
    sleep 2
fi

# Create log directory in project
LOG_DIR="./logs"
mkdir -p "$LOG_DIR"

# Start Terminal Bridge in background
echo
echo "Starting Terminal Bridge..."

# Find FlowLoom bin directory
if [[ -d ".flowloom/bin" && -f ".flowloom/bin/flowloom-terminal-bridge.py" ]]; then
    FLOWLOOM_BIN=".flowloom/bin"
elif [[ -d "bin" && -f "bin/flowloom-terminal-bridge.py" ]]; then
    FLOWLOOM_BIN="bin"
else
    echo "   ⚠️ FlowLoom bin directory not found"
    echo "   Looking for terminal bridge script..."
    BRIDGE_SCRIPT=$(find . -name "flowloom-terminal-bridge.py" -type f | head -1)
    if [[ -n "$BRIDGE_SCRIPT" ]]; then
        echo "   Found: $BRIDGE_SCRIPT"
        FLOWLOOM_BIN=$(dirname "$BRIDGE_SCRIPT")
    else
        echo "   ❌ Terminal bridge script not found"
        exit 1
    fi
fi

echo "   Using FlowLoom bin: $FLOWLOOM_BIN"
nohup python3 "$FLOWLOOM_BIN/flowloom-terminal-bridge.py" \
    > "$LOG_DIR/terminal-bridge.log" 2>&1 &
BRIDGE_PID=$!
echo "   PID: $BRIDGE_PID"
echo "   Log: $LOG_DIR/terminal-bridge.log"

# Give bridge time to start
sleep 1

# Start UI in background
echo
echo "Launching FlowLoom UI..."
nohup ./FlowLoomUI-Enhanced.swift \
    > "$LOG_DIR/flowloom-ui.log" 2>&1 &
UI_PID=$!
echo "   PID: $UI_PID"
echo "   Log: $LOG_DIR/flowloom-ui.log"

# Save PIDs for later cleanup
echo "$BRIDGE_PID" > "$LOG_DIR/bridge.pid"
echo "$UI_PID" > "$LOG_DIR/ui.pid"

# Write test messages to both output locations
echo "Writing test messages to output sinks..."

# Write to Claude response file  
cat > "./tmp/claude-response.md" << 'EOF'
# FlowLoom UI Test Message

🚀 **Launcher Test**: This message was written by the launcher script to test UI display.

## Test Information
- **Time**: $(date)
- **Source**: launch-flowloom-ui.sh
- **Purpose**: Testing UI presentation rendering

## UI Display Test
This should appear in the **presentation panel** of the FlowLoom UI.

### Features to verify:
- ✅ Markdown rendering
- ✅ File watching system
- ✅ Content updates
- ✅ Rich formatting

---
*Generated by FlowLoom UI Launcher*
EOF

# Write to demo file
cat >> "flowloom-demo.md" << 'EOF'

---

## Launcher Test Message
**Time**: $(date)
**Source**: launch-flowloom-ui.sh

🚀 **Test**: The launcher script wrote this message to test both output sinks.

This demonstrates:
1. **UI Response File**: `/tmp/flowloom-ui-response.md` (for UI presentation)
2. **Demo File**: `flowloom-demo.md` (for documentation)

Both files should receive messages and display properly in their respective contexts.

---
EOF

echo "✅ Test messages written to both output sinks"
echo

echo "✅ FlowLoom UI is running in the background!"
echo
echo "You can now use Claude normally while the UI runs."
echo
echo "Try these interactions:"
echo "  - In UI: 'What is FlowLoom?'"
echo "  - In UI: 'Show me how to create a Swift REST client'"
echo "  - Say: 'Hey Flo, explain async/await'"
echo
echo "To stop FlowLoom UI later, run: ./stop-flowloom-ui.sh"
echo

# Return control to user immediately
exit 0